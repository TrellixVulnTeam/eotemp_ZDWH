{"remainingRequest":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/thread-loader/dist/cjs.js!/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/babel-loader/lib/index.js!/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/js/Google Drive/_Github/github_upload/eotemp/src/components/IndicatorMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/src/components/IndicatorMap.vue","mtime":1624532486000},{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/babel-loader/lib/index.js","mtime":315532800000},{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/js/Google Drive/_Github/github_upload/eotemp/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90eXBlb2YgZnJvbSAiL1VzZXJzL2pzL0dvb2dsZSBEcml2ZS9fR2l0aHViL2dpdGh1Yl91cGxvYWQvZW90ZW1wL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90eXBlb2YiOwppbXBvcnQgX29iamVjdFNwcmVhZCBmcm9tICIvVXNlcnMvanMvR29vZ2xlIERyaXZlL19HaXRodWIvZ2l0aHViX3VwbG9hZC9lb3RlbXAvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFNwcmVhZDIiOwoKdmFyIF90aGlzID0gdGhpczsKCmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmlzLWFycmF5LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkubWFwLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnJlZHVjZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5maWx0ZXIuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZXhlYy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5zcGxpdC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm51bWJlci50by1maXhlZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC5rZXlzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuam9pbi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLmJpbmQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZnVuY3Rpb24ubmFtZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsbC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluZGV4LW9mLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3ltYm9sLmRlc2NyaXB0aW9uLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucGFyc2UtaW50LmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLwovLyBVdGlsaXRpZXMKaW1wb3J0IHsgbWFwU3RhdGUsIG1hcEdldHRlcnMgfSBmcm9tICd2dWV4JzsKaW1wb3J0IHsgZ2VvSnNvbiwgbGF0TG5nQm91bmRzLCBsYXRMbmcsIGNpcmNsZU1hcmtlciwgRGl2SWNvbiwgUG9pbnQgfSBmcm9tICdsZWFmbGV0JzsKaW1wb3J0IHsgdGVtcGxhdGUgfSBmcm9tICdAL3V0aWxzJzsKaW1wb3J0IHsgTE1hcCwgTFRpbGVMYXllciwgTFdNU1RpbGVMYXllciwgTEdlb0pzb24sIExDaXJjbGVNYXJrZXIsIExDb250cm9sTGF5ZXJzLCBMQ29udHJvbEF0dHJpYnV0aW9uLCBMQ29udHJvbFpvb20sIExMYXllckdyb3VwLCBMRmVhdHVyZUdyb3VwLCBMQ29udHJvbCwgTFRvb2x0aXAgfSBmcm9tICd2dWUyLWxlYWZsZXQnOwppbXBvcnQgeyBEYXRlVGltZSB9IGZyb20gJ2x1eG9uJzsKaW1wb3J0ICdsZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3MnOwppbXBvcnQgJ2xlYWZsZXQtbW91c2UtcG9zaXRpb24nOwppbXBvcnQgJ2xlYWZsZXQtc2lkZS1ieS1zaWRlJzsKaW1wb3J0ICdsZWFmbGV0LWxvYWRpbmcnOwppbXBvcnQgJ2xlYWZsZXQtbG9hZGluZy9zcmMvQ29udHJvbC5Mb2FkaW5nLmNzcyc7CmltcG9ydCAnbGVhZmxldC1kcmF3JzsKaW1wb3J0ICdsZWFmbGV0LWRyYXcvZGlzdC9sZWFmbGV0LmRyYXcuY3NzJzsKaW1wb3J0IFZ1ZTJMZWFmbGV0TWFya2VyQ2x1c3RlciBmcm9tICd2dWUyLWxlYWZsZXQtbWFya2VyY2x1c3Rlcic7CmltcG9ydCAnbGVhZmxldC5tYXJrZXJjbHVzdGVyL2Rpc3QvTWFya2VyQ2x1c3Rlci5jc3MnOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGltcG9ydC9uby1leHRyYW5lb3VzLWRlcGVuZGVuY2llcwoKaW1wb3J0ICdsZWFmbGV0Lm1hcmtlcmNsdXN0ZXIvZGlzdC9NYXJrZXJDbHVzdGVyLkRlZmF1bHQuY3NzJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBpbXBvcnQvbm8tZXh0cmFuZW91cy1kZXBlbmRlbmNpZXMKCmltcG9ydCB0dXJmRGlmZmVyZW5jZSBmcm9tICdAdHVyZi9kaWZmZXJlbmNlJzsKaW1wb3J0IGNvdW50cmllcyBmcm9tICdAL2Fzc2V0cy9jb3VudHJpZXMuanNvbic7CmltcG9ydCBnc2FGaWxlIGZyb20gJ0AvYXNzZXRzL2dzYV9kYXRhLmpzb24nOwp2YXIgZW1wdHlGID0gewogIHR5cGU6ICdGZWF0dXJlQ29sbGVjdGlvbicsCiAgZmVhdHVyZXM6IFtdCn07CnZhciBkYXRhRiA9IGVtcHR5RjsKdmFyIGNvbXBhcmVGID0gZW1wdHlGOwpleHBvcnQgZGVmYXVsdCB7CiAgcHJvcHM6IFsnY3VycmVudEluZGljYXRvciddLAogIGNvbXBvbmVudHM6IHsKICAgIExNYXA6IExNYXAsCiAgICBMVGlsZUxheWVyOiBMVGlsZUxheWVyLAogICAgTFdNU1RpbGVMYXllcjogTFdNU1RpbGVMYXllciwKICAgIExHZW9Kc29uOiBMR2VvSnNvbiwKICAgIExDaXJjbGVNYXJrZXI6IExDaXJjbGVNYXJrZXIsCiAgICBMQ29udHJvbExheWVyczogTENvbnRyb2xMYXllcnMsCiAgICBMQ29udHJvbEF0dHJpYnV0aW9uOiBMQ29udHJvbEF0dHJpYnV0aW9uLAogICAgTENvbnRyb2xab29tOiBMQ29udHJvbFpvb20sCiAgICBMTGF5ZXJHcm91cDogTExheWVyR3JvdXAsCiAgICBMRmVhdHVyZUdyb3VwOiBMRmVhdHVyZUdyb3VwLAogICAgTENvbnRyb2w6IExDb250cm9sLAogICAgTFRvb2x0aXA6IExUb29sdGlwLAogICAgJ2wtbWFya2VyLWNsdXN0ZXInOiBWdWUyTGVhZmxldE1hcmtlckNsdXN0ZXIKICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBtYXA6IG51bGwsCiAgICAgIGNvbXBhcmVMYXllcktleVhZWjogWzEsIDIsIDMsIDQsIDUsIDYsIDcsIDgsIDksIDEwLCAxMSwgMTIsIDEzLCAxNCwgMTVdLAogICAgICBkYXRhTGF5ZXJLZXlYWVo6IFs0MSwgNDIsIDQzLCA0NCwgNDUsIDQ2LCA0NywgNDgsIDQ5LCA1MCwgNTEsIDUyLCA1MywgNTQsIDU1XSwKICAgICAgZGF0YUpzb25LZXk6IDAsCiAgICAgIGNvbXBhcmVKc29uS2V5OiAtMSwKICAgICAgem9vbTogbnVsbCwKICAgICAgY2VudGVyOiBudWxsLAogICAgICBib3VuZHM6IG51bGwsCiAgICAgIGVuYWJsZUNvbXBhcmU6IGZhbHNlLAogICAgICBvcGFjaXR5VGVycmFpbjogWzFdLAogICAgICBvcGFjaXR5T3ZlcmxheTogWzFdLAogICAgICB0aWxlUGFuZTogJ3RpbGVQYW5lJywKICAgICAgb3ZlcmxheVBhbmU6ICdvdmVybGF5UGFuZScsCiAgICAgIG1hcmtlclBhbmU6ICdtYXJrZXJQYW5lJywKICAgICAgc2hhZG93UGFuZTogJ3NoYWRvd1BhbmUnLAogICAgICB0b29sdGlwUGFuZTogJ3Rvb2x0aXBQYW5lJywKICAgICAgcG9wdXBQYW5lOiAncG9wdXBQYW5lJywKICAgICAgbGVnZW5kRXhwYW5kZWQ6IGZhbHNlLAogICAgICBzbGlkZXI6IG51bGwsCiAgICAgIGRyYXdDb250cm9sOiBudWxsLAogICAgICByZW5kZXJUcmFzaEJpbjogZmFsc2UsCiAgICAgIGRlZmF1bHRNYXBPcHRpb25zOiB7CiAgICAgICAgYXR0cmlidXRpb25Db250cm9sOiBmYWxzZSwKICAgICAgICB6b29tQ29udHJvbDogZmFsc2UKICAgICAgfSwKICAgICAgZGF0YUxheWVyVGltZTogbnVsbCwKICAgICAgY29tcGFyZUxheWVyVGltZTogbnVsbCwKICAgICAgZGF0YUxheWVySW5kZXg6IDAsCiAgICAgIGNvbXBhcmVMYXllckluZGV4OiAwLAogICAgICBkYXRhRmVhdHVyZXNDb3VudDogMCwKICAgICAgY29tcGFyZUZlYXR1cmVzQ291bnQ6IDAsCiAgICAgIHNlbGVjdGVkQ291bnRyeTogbnVsbCwKICAgICAgc2VsZWN0ZWRCb3JkZXI6IG51bGwsCiAgICAgIHNlbGVjdGVkTGF5ZXI6IG51bGwKICAgIH07CiAgfSwKICBjb21wdXRlZDogX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIG1hcFN0YXRlKCdjb25maWcnLCBbJ2FwcENvbmZpZycsICdiYXNlQ29uZmlnJ10pKSwgbWFwR2V0dGVycygnaW5kaWNhdG9ycycsIFsnZ2V0SW5kaWNhdG9yRmlsdGVyZWRJbnB1dERhdGEnXSkpLCB7fSwgewogICAgY291bnRyaWVzSnNvbjogZnVuY3Rpb24gY291bnRyaWVzSnNvbigpIHsKICAgICAgcmV0dXJuIGNvdW50cmllczsKICAgIH0sCiAgICBnc2FKc29uOiBmdW5jdGlvbiBnc2FKc29uKCkgewogICAgICByZXR1cm4gZ3NhRmlsZTsKICAgIH0sCiAgICBjb3VudHJpZXNTdHlsZTogZnVuY3Rpb24gY291bnRyaWVzU3R5bGUoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgY29sb3I6ICcjMjIyJywKICAgICAgICB3ZWlnaHQ6IDEsCiAgICAgICAgZmlsbENvbG9yOiAnI2ZmZicsCiAgICAgICAgb3BhY2l0eTogMSwKICAgICAgICBmaWxsT3BhY2l0eTogMC41CiAgICAgIH07CiAgICB9LAogICAgZGF0YUpzb25Db21wdXRlZDogewogICAgICAvLyB0byBhdm9pZCBlYWNoIG9mIHRob3VzYW5kcyBvZiBnZW9qc29uIGZlYXR1cmVzIGhhdmUgaXRzIG93bgogICAgICAvLyBnZXR0ZXIvc2V0dGVyIHNldCBieSB2dWUgLSBmcmVlemluZyB0aGUgYXBwIG9uIGxhcmdlIG51bWJlciBvZiBwdHMKICAgICAgLy8gd2UgbWFudWFsbHkgcmVyZW5kZXIgcmVsZXZhbnQgdnVlIGNvbXBvbmVudHMgYW55d2F5CiAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgIHJldHVybiBfdGhpcy5nZXREYXRhRigpOwogICAgICB9LAogICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh2KSB7CiAgICAgICAgZGF0YUYgPSB2OwogICAgICB9CiAgICB9LAogICAgY29tcGFyZUpzb25Db21wdXRlZDogewogICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICByZXR1cm4gX3RoaXMuZ2V0Q29tcGFyZUYoKTsKICAgICAgfSwKICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodikgewogICAgICAgIGNvbXBhcmVGID0gdjsKICAgICAgfQogICAgfSwKICAgIHN1YkFvaUludmVyc2VTdHlsZTogZnVuY3Rpb24gc3ViQW9pSW52ZXJzZVN0eWxlKCkgewogICAgICByZXR1cm4gewogICAgICAgIHN0cm9rZTogZmFsc2UsCiAgICAgICAgZmlsbENvbG9yOiB0aGlzLmdldEluZGljYXRvckNvbG9yKCdwcmltYXJ5JyksCiAgICAgICAgZmlsbE9wYWNpdHk6IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLnN1YkFvaUZpbGxPcGFjaXR5IHx8IDAuNQogICAgICB9OwogICAgfSwKICAgIGJhc2VMYXllcnM6IGZ1bmN0aW9uIGJhc2VMYXllcnMoKSB7CiAgICAgIC8vIGV4cGVjdHMgYW4gYXJyYXkgb2Ygb2JqZWN0cwogICAgICByZXR1cm4gdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYmFzZUxheWVycyB8fCB0aGlzLmJhc2VDb25maWcuYmFzZUxheWVyc1JpZ2h0TWFwOwogICAgfSwKICAgIG92ZXJsYXlMYXllcnM6IGZ1bmN0aW9uIG92ZXJsYXlMYXllcnMoKSB7CiAgICAgIHJldHVybiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5vdmVybGF5TGF5ZXJzIHx8IHRoaXMuYmFzZUNvbmZpZy5vdmVybGF5TGF5ZXJzUmlnaHRNYXA7CiAgICB9LAogICAgbWFwRGVmYXVsdHM6IGZ1bmN0aW9uIG1hcERlZmF1bHRzKCkgewogICAgICByZXR1cm4gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmJhc2VDb25maWcubWFwRGVmYXVsdHMpLCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXSk7CiAgICB9LAogICAgY291bnRyeVNlbGVjdGlvbjogZnVuY3Rpb24gY291bnRyeVNlbGVjdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmNvdW50cnlTZWxlY3Rpb247CiAgICB9LAogICAgYm9yZGVyU2VsZWN0aW9uOiBmdW5jdGlvbiBib3JkZXJTZWxlY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5ib3JkZXJTZWxlY3Rpb247CiAgICB9LAogICAgaW5kRGVmaW5pdGlvbjogZnVuY3Rpb24gaW5kRGVmaW5pdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuYmFzZUNvbmZpZy5pbmRpY2F0b3JzRGVmaW5pdGlvblt0aGlzLmluZGljYXRvci5pbmRpY2F0b3JdOwogICAgfSwKICAgIGFkZGl0aW9uYWxNYXBUaW1lczogZnVuY3Rpb24gYWRkaXRpb25hbE1hcFRpbWVzKCkgewogICAgICByZXR1cm4gdGhpcy5iYXNlQ29uZmlnLmFkZGl0aW9uYWxNYXBUaW1lcyAmJiB0aGlzLmJhc2VDb25maWcuYWRkaXRpb25hbE1hcFRpbWVzWyIiLmNvbmNhdCh0aGlzLmluZGljYXRvci5hb2lJRCwgIi0iKS5jb25jYXQodGhpcy5pbmRpY2F0b3IuaW5kaWNhdG9yKV07CiAgICB9LAogICAgZXhjbHVkZU1hcFRpbWVzOiBmdW5jdGlvbiBleGNsdWRlTWFwVGltZXMoKSB7CiAgICAgIHJldHVybiB0aGlzLmJhc2VDb25maWcuZXhjbHVkZU1hcFRpbWVzICYmIHRoaXMuYmFzZUNvbmZpZy5leGNsdWRlTWFwVGltZXNbIiIuY29uY2F0KHRoaXMuaW5kaWNhdG9yLmFvaUlELCAiLSIpLmNvbmNhdCh0aGlzLmluZGljYXRvci5pbmRpY2F0b3IpXTsKICAgIH0sCiAgICByZXBsYWNlTWFwVGltZXM6IGZ1bmN0aW9uIHJlcGxhY2VNYXBUaW1lcygpIHsKICAgICAgcmV0dXJuIHRoaXMuYmFzZUNvbmZpZy5yZXBsYWNlTWFwVGltZXMgJiYgdGhpcy5iYXNlQ29uZmlnLnJlcGxhY2VNYXBUaW1lc1siIi5jb25jYXQodGhpcy5pbmRpY2F0b3IuYW9pSUQsICItIikuY29uY2F0KHRoaXMuaW5kaWNhdG9yLmluZGljYXRvcildOwogICAgfSwKICAgIGluZGljYXRvcjogZnVuY3Rpb24gaW5kaWNhdG9yKCkgewogICAgICByZXR1cm4gdGhpcy5nZXRJbmRpY2F0b3JGaWx0ZXJlZElucHV0RGF0YSh0aGlzLmN1cnJlbnRJbmRpY2F0b3IgfHwgbnVsbCk7CiAgICB9LAogICAgc2hvd0FvaTogZnVuY3Rpb24gc2hvd0FvaSgpIHsKICAgICAgcmV0dXJuIHRoaXMuYW9pICYmICghdGhpcy5zdWJBb2kgfHwgdGhpcy5zdWJBb2kuZmVhdHVyZXMubGVuZ3RoID09PSAwKTsKICAgIH0sCiAgICB2YWxpZERyYXduQXJlYTogZnVuY3Rpb24gdmFsaWREcmF3bkFyZWEoKSB7CiAgICAgIC8vIGFsbG93cyBmb3IgZnVydGhlciB2YWxpZGF0aW9uIG9uIGFyZWEgc2l6ZSBldGMuCiAgICAgIHJldHVybiB0aGlzLmRyYXduQXJlYSAhPT0gbnVsbDsKICAgIH0sCiAgICBkcmF3bkFyZWE6IGZ1bmN0aW9uIGRyYXduQXJlYSgpIHsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLmZlYXR1cmVzLnNlbGVjdGVkQXJlYTsKICAgIH0sCiAgICBjdXN0b21BcmVhRmlsdGVyOiBmdW5jdGlvbiBjdXN0b21BcmVhRmlsdGVyKCkgewogICAgICByZXR1cm4gdGhpcy5tZXJnZWRDb25maWdzKClbMF0uY3VzdG9tQXJlYUZlYXR1cmVzIHx8IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFJbmRpY2F0b3I7CiAgICB9LAogICAgdXNlZFRpbWVzOiBmdW5jdGlvbiB1c2VkVGltZXMoKSB7CiAgICAgIHZhciB0aW1lcyA9IHRoaXMuaW5kaWNhdG9yLnRpbWU7CiAgICAgIHZhciBlb1NlbnNvciA9IEFycmF5LmlzQXJyYXkodGhpcy5pbmRpY2F0b3IuZW9TZW5zb3IpICYmIHRoaXMuaW5kaWNhdG9yLmVvU2Vuc29yOwogICAgICB2YXIgaW5wdXREYXRhID0gQXJyYXkuaXNBcnJheSh0aGlzLmluZGljYXRvci5pbnB1dERhdGEpICYmIHRoaXMuaW5kaWNhdG9yLmlucHV0RGF0YTsKICAgICAgdmFyIGNvbG9yQ29kZSA9IEFycmF5LmlzQXJyYXkodGhpcy5pbmRpY2F0b3IuY29sb3JDb2RlKSAmJiB0aGlzLmluZGljYXRvci5jb2xvckNvZGU7IC8vIGNvbXBsZXRlbHkgcmVwbGFjZSBnaXZlbiB0aW1lcyBvciBlb1NlbnNvcgoKICAgICAgaWYgKHRoaXMucmVwbGFjZU1hcFRpbWVzICYmIEFycmF5LmlzQXJyYXkodGhpcy5yZXBsYWNlTWFwVGltZXMudGltZSkpIHsKICAgICAgICB0aW1lcyA9IHRoaXMucmVwbGFjZU1hcFRpbWVzLnRpbWU7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnJlcGxhY2VNYXBUaW1lcyAmJiBBcnJheS5pc0FycmF5KHRoaXMucmVwbGFjZU1hcFRpbWVzLmVvU2Vuc29yKSkgewogICAgICAgIGVvU2Vuc29yID0gdGhpcy5yZXBsYWNlTWFwVGltZXMuZW9TZW5zb3I7IC8vIGp1c3QgZm9yIGRpc3BsYXkKICAgICAgfQoKICAgICAgaWYgKHRoaXMucmVwbGFjZU1hcFRpbWVzICYmIEFycmF5LmlzQXJyYXkodGhpcy5yZXBsYWNlTWFwVGltZXMuaW5wdXREYXRhKSkgewogICAgICAgIGlucHV0RGF0YSA9IHRoaXMucmVwbGFjZU1hcFRpbWVzLmlucHV0RGF0YTsgLy8gbmVlZHMgdG8gYmUgdXNlZCB1bmxlc3MgaW5kaWNhdG9yLmRpc3BsYXkgaXMgdXNlZCAodGhhdCBvdmVycmlkZXMgaXQpCiAgICAgIH0KCiAgICAgIGlmICh0aGlzLnJlcGxhY2VNYXBUaW1lcyAmJiBBcnJheS5pc0FycmF5KHRoaXMucmVwbGFjZU1hcFRpbWVzLmNvbG9yQ29kZSkpIHsKICAgICAgICBjb2xvckNvZGUgPSB0aGlzLnJlcGxhY2VNYXBUaW1lcy5jb2xvckNvZGU7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmFkZGl0aW9uYWxNYXBUaW1lcykgewogICAgICAgIC8vIGFkZCBhZGRpdGlvbmFsIHRpbWVzIGFuZCBlb1NlbnNvciB0byBvcmlnaW5hbCBhcnJheXMKICAgICAgICAvLyBzb3J0IHRpbWUgYXNjZW5kaW5nIGFuZCBzb3J0IGFycmF5cyBiYXNlZCBvbiB0aW1lIGFycmF5IHZpYSBoZWxwZXIgbGlzdCBjb21iaW5pbmcgYWxsCiAgICAgICAgdmFyIGR0T2JqZWN0cyA9IHRoaXMuYWRkaXRpb25hbE1hcFRpbWVzLnRpbWUubWFwKGZ1bmN0aW9uICh0KSB7CiAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyh0KTsKICAgICAgICB9KTsKICAgICAgICB2YXIgbWVyZ2VkVGltZXMgPSB0aW1lcy5jb25jYXQoZHRPYmplY3RzKTsKICAgICAgICB2YXIgbWVyZ2VkU2Vuc29ycyA9IGVvU2Vuc29yLmNvbmNhdCh0aGlzLmFkZGl0aW9uYWxNYXBUaW1lcy5lb1NlbnNvcik7CiAgICAgICAgdmFyIG1lcmdlZElucHV0RGF0YSA9IGlucHV0RGF0YS5jb25jYXQodGhpcy5hZGRpdGlvbmFsTWFwVGltZXMuaW5wdXREYXRhKTsKICAgICAgICB2YXIgbWVyZ2VkQ29sb3JDb2RlID0gY29sb3JDb2RlLmNvbmNhdCh0aGlzLmFkZGl0aW9uYWxNYXBUaW1lcy5jb2xvckNvZGUpOyAvLyBjb21iaW5lIHRoZSBhcnJheXMKCiAgICAgICAgdmFyIGxpc3QgPSBbXTsKCiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXJnZWRUaW1lcy5sZW5ndGg7IGorKykgewogICAgICAgICAgbGlzdC5wdXNoKHsKICAgICAgICAgICAgdGltZTogbWVyZ2VkVGltZXNbal0sCiAgICAgICAgICAgIGVvU2Vuc29yOiBtZXJnZWRTZW5zb3JzW2pdLAogICAgICAgICAgICBpbnB1dERhdGE6IG1lcmdlZElucHV0RGF0YVtqXSwKICAgICAgICAgICAgY29sb3JDb2RlOiBtZXJnZWRDb2xvckNvZGVbal0KICAgICAgICAgIH0pOwogICAgICAgIH0gLy8gc29ydCBtYXBwaW5nIGJ5IHRpbWUgYXNjCgoKICAgICAgICBsaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHsKICAgICAgICAgIHJldHVybiBhLnRpbWUudG9NaWxsaXMoKSAtIGIudGltZS50b01pbGxpcygpOwogICAgICAgIH0pOyAvLyBzZXBhcmF0ZSB0aGVtIGJhY2sgb3V0CgogICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgbGlzdC5sZW5ndGg7IGsrKykgewogICAgICAgICAgbWVyZ2VkVGltZXNba10gPSBsaXN0W2tdLnRpbWU7CiAgICAgICAgICBtZXJnZWRTZW5zb3JzW2tdID0gbGlzdFtrXS5lb1NlbnNvcjsKICAgICAgICAgIG1lcmdlZElucHV0RGF0YVtrXSA9IGxpc3Rba10uaW5wdXREYXRhOwogICAgICAgICAgbWVyZ2VkQ29sb3JDb2RlW2tdID0gbGlzdFtrXS5jb2xvckNvZGU7CiAgICAgICAgfQoKICAgICAgICB0aW1lcyA9IG1lcmdlZFRpbWVzOwogICAgICAgIGVvU2Vuc29yID0gbWVyZ2VkU2Vuc29yczsKICAgICAgICBpbnB1dERhdGEgPSBtZXJnZWRJbnB1dERhdGE7CiAgICAgICAgY29sb3JDb2RlID0gbWVyZ2VkQ29sb3JDb2RlOwogICAgICB9CgogICAgICBpZiAodGhpcy5leGNsdWRlTWFwVGltZXMgJiYgQXJyYXkuaXNBcnJheSh0aGlzLmV4Y2x1ZGVNYXBUaW1lcykpIHsKICAgICAgICAvLyBleGNsdWRlIHRpbWVzIGFuZCByZXNwZWN0aXZlIGVudHJpZXMgZnJvbSBvdGhlciBhcnJheXMKICAgICAgICB2YXIgX2R0T2JqZWN0cyA9IHRoaXMuZXhjbHVkZU1hcFRpbWVzLm1hcChmdW5jdGlvbiAodCkgewogICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08odCk7CiAgICAgICAgfSk7CgogICAgICAgIHZhciBpbmRUb0RlbGV0ZSA9IHRpbWVzLnJlZHVjZShmdW5jdGlvbiAoYSwgZSwgaSkgewogICAgICAgICAgLy8gZmluZCBpZiBhbnkgdGltZSBpcyBpbiB0byBiZSBkZWxldGVkCiAgICAgICAgICB2YXIgZm91bmQgPSBfZHRPYmplY3RzLmZpbmQoZnVuY3Rpb24gKHRpbWUpIHsKICAgICAgICAgICAgcmV0dXJuIHRpbWUudG9NaWxsaXMoKSA9PT0gZS50b01pbGxpcygpOwogICAgICAgICAgfSk7CgogICAgICAgICAgaWYgKHR5cGVvZiBmb3VuZCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgLy8gYWRkIGl0cyBpbmRleCB0byBsaXN0CiAgICAgICAgICAgIGEucHVzaChpKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gYTsKICAgICAgICB9LCBbXSk7IC8vIHNldCBpdGVtcyBpbiBhbGwgYXJyYXlzIHRvIG51bGwKCiAgICAgICAgaW5kVG9EZWxldGUuZm9yRWFjaChmdW5jdGlvbiAoaSkgewogICAgICAgICAgdGltZXNbaV0gPSBudWxsOwoKICAgICAgICAgIGlmICh0eXBlb2YgZW9TZW5zb3JbaV0gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgIGVvU2Vuc29yW2ldID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodHlwZW9mIGlucHV0RGF0YVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgaW5wdXREYXRhW2ldID0gbnVsbDsKICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodHlwZW9mIGNvbG9yQ29kZVtpXSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgY29sb3JDb2RlW2ldID0gbnVsbDsKICAgICAgICAgIH0KICAgICAgICB9KTsgLy8gZmlsdGVyIG91dCBudWxscwoKICAgICAgICB0aW1lcyA9IHRpbWVzLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgcmV0dXJuIGUgIT09IG51bGw7CiAgICAgICAgfSk7CiAgICAgICAgZW9TZW5zb3IgPSBlb1NlbnNvci5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlICE9PSBudWxsOwogICAgICAgIH0pOwogICAgICAgIGlucHV0RGF0YSA9IGlucHV0RGF0YS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlICE9PSBudWxsOwogICAgICAgIH0pOwogICAgICAgIGNvbG9yQ29kZSA9IGNvbG9yQ29kZS5maWx0ZXIoZnVuY3Rpb24gKGUpIHsKICAgICAgICAgIHJldHVybiBlICE9PSBudWxsOwogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gewogICAgICAgIHRpbWU6IHRpbWVzLAogICAgICAgIGVvU2Vuc29yOiBlb1NlbnNvciwKICAgICAgICBpbnB1dERhdGE6IGlucHV0RGF0YSwKICAgICAgICBjb2xvckNvZGU6IGNvbG9yQ29kZQogICAgICB9OwogICAgfSwKICAgIGFycmF5T2ZPYmplY3RzOiBmdW5jdGlvbiBhcnJheU9mT2JqZWN0cygpIHsKICAgICAgdmFyIHNlbGVjdGlvbk9wdGlvbnMgPSBbXTsKCiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy51c2VkVGltZXMudGltZS5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgIHZhciBsYWJlbCA9IHRoaXMuZ2V0VGltZUxhYmVsKHRoaXMudXNlZFRpbWVzLnRpbWVbaV0pOwoKICAgICAgICBpZiAodGhpcy51c2VkVGltZXMuZW9TZW5zb3IpIHsKICAgICAgICAgIHZhciBlb1NlbnNvciA9IHRoaXMudXNlZFRpbWVzLmVvU2Vuc29yLmxlbmd0aCA9PT0gMSA/IHRoaXMudXNlZFRpbWVzLmVvU2Vuc29yWzBdIDogdGhpcy51c2VkVGltZXMuZW9TZW5zb3JbaV07CiAgICAgICAgICBsYWJlbCArPSAiIC0gIi5jb25jYXQoZW9TZW5zb3IpOwogICAgICAgIH0KCiAgICAgICAgc2VsZWN0aW9uT3B0aW9ucy5wdXNoKHsKICAgICAgICAgIHZhbHVlOiB0aGlzLnVzZWRUaW1lcy50aW1lW2ldLAogICAgICAgICAgbmFtZTogbGFiZWwKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgcmV0dXJuIHNlbGVjdGlvbk9wdGlvbnM7CiAgICB9LAogICAgY3VycmVudFRpbWU6IGZ1bmN0aW9uIGN1cnJlbnRUaW1lKCkgewogICAgICB2YXIgcmV0dXJuVGltZSA9IHRoaXMudXNlZFRpbWVzLnRpbWVbdGhpcy51c2VkVGltZXMudGltZS5sZW5ndGggLSAxXTsKCiAgICAgIGlmICh0aGlzLmRhdGFMYXllclRpbWUgIT09IG51bGwpIHsKICAgICAgICByZXR1cm5UaW1lID0gdGhpcy5kYXRhTGF5ZXJUaW1lOwogICAgICB9CgogICAgICByZXR1cm4gcmV0dXJuVGltZTsKICAgIH0sCiAgICBjdXJyZW50Q29tcGFyZVRpbWU6IGZ1bmN0aW9uIGN1cnJlbnRDb21wYXJlVGltZSgpIHsKICAgICAgdmFyIHJldHVyblRpbWUgPSB0aGlzLmdldEluaXRpYWxDb21wYXJlVGltZSgpOwoKICAgICAgaWYgKHRoaXMuY29tcGFyZUxheWVyVGltZSAhPT0gbnVsbCkgewogICAgICAgIHJldHVyblRpbWUgPSB0aGlzLmNvbXBhcmVMYXllclRpbWU7CiAgICAgIH0KCiAgICAgIGlmICh0aGlzLmluZGljYXRvci5jb21wYXJlRGlzcGxheSkgewogICAgICAgIC8vIHNoYXJlZCB0aW1lIG9uIGJvdGggbGF5ZXJzIGluIGNhc2Ugb2YgY29tcGFyZURpc3BsYXkgYmVpbmcgc2V0CiAgICAgICAgcmV0dXJuVGltZSA9IHRoaXMuZGF0YUxheWVyVGltZTsKICAgICAgfQoKICAgICAgcmV0dXJuIHJldHVyblRpbWU7CiAgICB9LAogICAgYW9pOiBmdW5jdGlvbiBhb2koKSB7CiAgICAgIHJldHVybiB0aGlzLmluZGljYXRvci5hb2k7CiAgICB9LAogICAgc3ViQW9pOiBmdW5jdGlvbiBzdWJBb2koKSB7CiAgICAgIHJldHVybiB0aGlzLmluZGljYXRvci5zdWJBb2k7CiAgICB9LAogICAgc3ViQW9pSW52ZXJzZTogZnVuY3Rpb24gc3ViQW9pSW52ZXJzZSgpIHsKICAgICAgLy8gY3JlYXRlIGFuIGludmVyc2Ugb2Ygc3ViYW9pLCB1c2luZyBkaWZmZXJlbmNlIG9mIHdob2xlIHdvcmxkIGFuZCBzdWJhb2kKICAgICAgdmFyIHN1YmFvaUludiA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5zdWJBb2kpKTsgLy8gYm90aCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLnN1YkFvaSkgYW5kIHsgLi4udGhpcy5zdWJBb2kgfSBjcmVhdGUgc2hhbGxvdyBjb3B5CgogICAgICBpZiAoc3ViYW9pSW52LmZlYXR1cmVzLmxlbmd0aCA9PT0gMSkgewogICAgICAgIHZhciBnbG9iYWxCb3ggPSB7CiAgICAgICAgICB0eXBlOiAnRmVhdHVyZScsCiAgICAgICAgICBwcm9wZXJ0aWVzOiB7fSwKICAgICAgICAgIGdlb21ldHJ5OiB7CiAgICAgICAgICAgIHR5cGU6ICdQb2x5Z29uJywKICAgICAgICAgICAgY29vcmRpbmF0ZXM6IFtbWy0xODAsIC05MF0sIFsxODAsIC05MF0sIFsxODAsIDkwXSwgWy0xODAsIDkwXSwgWy0xODAsIC05MF1dXQogICAgICAgICAgfQogICAgICAgIH07CiAgICAgICAgdmFyIGRpZmYgPSB0dXJmRGlmZmVyZW5jZShnbG9iYWxCb3gsIHN1YmFvaUludi5mZWF0dXJlc1swXSk7CiAgICAgICAgc3ViYW9pSW52LmZlYXR1cmVzWzBdID0gZGlmZjsKICAgICAgfQoKICAgICAgcmV0dXJuIHN1YmFvaUludjsKICAgIH0sCiAgICBjbHVzdGVyT3B0aW9uczogZnVuY3Rpb24gY2x1c3Rlck9wdGlvbnMoKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgZGlzYWJsZUNsdXN0ZXJpbmdBdFpvb206IDEzLAogICAgICAgIGFuaW1hdGU6IGZhbHNlLAogICAgICAgIC8vIHpvb21Ub0JvdW5kc09uQ2xpY2s6IGZhbHNlLAogICAgICAgIGljb25DcmVhdGVGdW5jdGlvbjogZnVuY3Rpb24gaWNvbkNyZWF0ZUZ1bmN0aW9uKGNsdXN0ZXIpIHsKICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZnVuYy1uYW1lcwogICAgICAgICAgLy8gbW9kaWZpZWQgc2VsZWN0ZWQgY2x1c3RlciBzdHlsZQogICAgICAgICAgdmFyIGNoaWxkQ291bnQgPSBjbHVzdGVyLmdldENoaWxkQ291bnQoKTsKICAgICAgICAgIHJldHVybiBuZXcgRGl2SWNvbih7CiAgICAgICAgICAgIGh0bWw6ICI8ZGl2PjxzcGFuPiIuY29uY2F0KGNoaWxkQ291bnQsICI8L3NwYW4+PC9kaXY+IiksCiAgICAgICAgICAgIGNsYXNzTmFtZTogJ21hcmtlci1jbHVzdGVyJywKICAgICAgICAgICAgaWNvblNpemU6IG5ldyBQb2ludCg0MCwgNDApCiAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIHBvbHlnb25PcHRpb25zOiB7CiAgICAgICAgICBmaWxsQ29sb3I6IHRoaXMuYXBwQ29uZmlnLmJyYW5kaW5nLnByaW1hcnlDb2xvciwKICAgICAgICAgIGNvbG9yOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IsCiAgICAgICAgICB3ZWlnaHQ6IDAuNSwKICAgICAgICAgIG9wYWNpdHk6IDEsCiAgICAgICAgICBmaWxsT3BhY2l0eTogMC4zLAogICAgICAgICAgZGFzaEFycmF5OiA0CiAgICAgICAgfQogICAgICB9OwogICAgfSwKICAgIGRyYXdPcHRpb25zOiBmdW5jdGlvbiBkcmF3T3B0aW9ucygpIHsKICAgICAgcmV0dXJuIHsKICAgICAgICBwb3NpdGlvbjogJ3RvcHJpZ2h0JywKICAgICAgICBkcmF3OiB7CiAgICAgICAgICBwb2x5bGluZTogZmFsc2UsCiAgICAgICAgICBjaXJjbGU6IGZhbHNlLAogICAgICAgICAgbWFya2VyOiBmYWxzZSwKICAgICAgICAgIGNpcmNsZW1hcmtlcjogZmFsc2UsCiAgICAgICAgICBwb2x5Z29uOiB7CiAgICAgICAgICAgIHNoYXBlT3B0aW9uczogewogICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIHJlY3RhbmdsZTogewogICAgICAgICAgICBzaG93QXJlYTogZmFsc2UsCiAgICAgICAgICAgIHNoYXBlT3B0aW9uczogewogICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfTsKICAgIH0KICB9KSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdGhpcy5kYXRhTGF5ZXJJbmRleCA9IHRoaXMudXNlZFRpbWVzLnRpbWUubGVuZ3RoIC0gMTsKICAgIHRoaXMuZGF0YUxheWVyVGltZSA9IHsKICAgICAgdmFsdWU6IHRoaXMudXNlZFRpbWVzLnRpbWVbdGhpcy5kYXRhTGF5ZXJJbmRleF0KICAgIH07CiAgICB0aGlzLmNvbXBhcmVMYXllclRpbWUgPSB7CiAgICAgIHZhbHVlOiB0aGlzLmdldEluaXRpYWxDb21wYXJlVGltZSgpCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgY3JlYXRlTGF0TG5nOiBmdW5jdGlvbiBjcmVhdGVMYXRMbmcobGF0bG5nKSB7CiAgICAgIHZhciBsbG9iaiA9IGxhdGxuZy5zcGxpdCgnLCcpLm1hcChOdW1iZXIpOwogICAgICBjb25zb2xlLmxvZyhsbG9iaik7CiAgICAgIHJldHVybiBsbG9iajsKICAgIH0sCiAgICB6b29tVXBkYXRlZDogZnVuY3Rpb24gem9vbVVwZGF0ZWQoem9vbSkgewogICAgICB0aGlzLnpvb20gPSB6b29tOwogICAgfSwKICAgIGNlbnRlclVwZGF0ZWQ6IGZ1bmN0aW9uIGNlbnRlclVwZGF0ZWQoY2VudGVyKSB7CiAgICAgIHRoaXMuY2VudGVyID0gY2VudGVyOwogICAgfSwKICAgIGJvdW5kc1VwZGF0ZWQ6IGZ1bmN0aW9uIGJvdW5kc1VwZGF0ZWQoYm91bmRzKSB7CiAgICAgIHRoaXMuYm91bmRzID0gYm91bmRzOwogICAgfSwKICAgIG9uTWFwUmVhZHk6IGZ1bmN0aW9uIG9uTWFwUmVhZHkoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdGhpcy5tYXAgPSB0aGlzLiRyZWZzLm1hcC5tYXBPYmplY3Q7CiAgICAgIHZhciBsYXllckJ1dHRvbnMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcubGVhZmxldC1jb250cm9sLWxheWVycy10b2dnbGUnKTsKICAgICAgbGF5ZXJCdXR0b25zLmZvckVhY2goZnVuY3Rpb24gKGxCKSB7CiAgICAgICAgcmV0dXJuIGxCLmlubmVySFRNTCA9ICI8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIiIuY29uY2F0KF90aGlzMi5hcHBDb25maWcuYnJhbmRpbmcucHJpbWFyeUNvbG9yLCAiXCIgd2lkdGg9XCIzMnB4XCIgaGVpZ2h0PVwiMzJweFwiPjxwYXRoIGQ9XCJNMCAwaDI0djI0SDB6XCIgZmlsbD1cIm5vbmVcIi8+PHBhdGggZD1cIk0xMS45OSAxOC41NGwtNy4zNy01LjczTDMgMTQuMDdsOSA3IDktNy0xLjYzLTEuMjctNy4zOCA1Ljc0ek0xMiAxNmw3LjM2LTUuNzNMMjEgOWwtOS03LTkgNyAxLjYzIDEuMjdMMTIgMTZ6XCIvPjwvc3ZnPiIpOwogICAgICB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAvLyB1cGRhdGUgbGVhZmxldCBjb250cm9scwoKICAgICAgTC5jb250cm9sLm1vdXNlUG9zaXRpb24oewogICAgICAgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWYKICAgICAgICBlbXB0eVN0cmluZzogJycsCiAgICAgICAgZm9ybWF0dGVyOiBmdW5jdGlvbiBmb3JtYXR0ZXIobG9uLCBsYXQpIHsKICAgICAgICAgIHJldHVybiAiIi5jb25jYXQobG9uLnRvRml4ZWQoMyksICIsICIpLmNvbmNhdChsYXQudG9GaXhlZCgzKSk7CiAgICAgICAgfSwKICAgICAgICBwb3NpdGlvbjogJ2JvdHRvbXJpZ2h0JwogICAgICB9KS5hZGRUbyh0aGlzLm1hcCk7IC8vIGhpZGUgYXR0cmlidXRpb24gdW5kZXIgaWNvbgoKICAgICAgdGhpcy5tYXAuYXR0cmlidXRpb25Db250cm9sLl91cGRhdGUgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgIHZhciBhdHRyaWJzID0gW107CiAgICAgICAgdmFyIGtrID0gT2JqZWN0LmtleXModGhpcy5fYXR0cmlidXRpb25zKTsKCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBray5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgaWYgKHRoaXMuX2F0dHJpYnV0aW9uc1tra1tpXV0pIHsKICAgICAgICAgICAgYXR0cmlicy5wdXNoKGtrW2ldKTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciBwcmVmaXhBbmRBdHRyaWJzID0gW107CgogICAgICAgIGlmICh0aGlzLm9wdGlvbnMucHJlZml4KSB7CiAgICAgICAgICBwcmVmaXhBbmRBdHRyaWJzLnB1c2godGhpcy5vcHRpb25zLnByZWZpeCk7CiAgICAgICAgfQoKICAgICAgICBpZiAoYXR0cmlicy5sZW5ndGgpIHsKICAgICAgICAgIHByZWZpeEFuZEF0dHJpYnMucHVzaChhdHRyaWJzLmpvaW4oJywgJykpOwogICAgICAgIH0KCiAgICAgICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9ICI8ZGl2IGNsYXNzPSdhdHRyaWJ1dGlvbi1ib2R5Jz4iLmNvbmNhdChwcmVmaXhBbmRBdHRyaWJzLmpvaW4oJyB8ICcpLCAiPC9kaXY+PGRpdiBjbGFzcz0nYXR0cmlidXRpb24taWNvbic+XHUyMTM5PC9kaXY+Iik7CiAgICAgIH07CgogICAgICB0aGlzLm1hcC5hdHRyaWJ1dGlvbkNvbnRyb2wuX3VwZGF0ZSgpOyAvLyBhZGQgbG9hZGluZyBpbmRpY2F0b3IKCgogICAgICBMLkNvbnRyb2wubG9hZGluZyh7CiAgICAgICAgcG9zaXRpb246ICdib3R0b21sZWZ0JywKICAgICAgICBkZWxheUluZGljYXRvcjogMjAwCiAgICAgIH0pLmFkZFRvKHRoaXMubWFwKTsgLy8gYWRkIEEvQiBzbGlkZXIKCiAgICAgIHZhciBsZWZ0TGF5ZXJzID0gdGhpcy5leHRyYWN0QWN0dWFsTGF5ZXJzKHRoaXMuJHJlZnMuY29tcGFyZUxheWVycyk7CiAgICAgIHZhciByaWdodExheWVycyA9IHRoaXMuZXh0cmFjdEFjdHVhbExheWVycyh0aGlzLiRyZWZzLmRhdGFMYXllcnMpOwogICAgICB0aGlzLnNsaWRlciA9IEwuY29udHJvbC5zaWRlQnlTaWRlKGxlZnRMYXllcnMsIHJpZ2h0TGF5ZXJzKTsKICAgICAgdGhpcy5kcmF3Q29udHJvbCA9IG5ldyBMLkNvbnRyb2wuRHJhdyh0aGlzLmRyYXdPcHRpb25zKTsKICAgICAgdGhpcy5tYXAub24oTC5EcmF3LkV2ZW50LkNSRUFURUQsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgIC8vIHNldCBnbG9iYWwgYXJlYSBnZW9tZXRyeSBhcyBqc29uCiAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdmZWF0dXJlcy9TRVRfU0VMRUNURURfQVJFQScsIGUubGF5ZXIudG9HZW9KU09OKCkuZ2VvbWV0cnkpOwogICAgICB9LmJpbmQodGhpcykpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgIC8vIG9ubHkgZHJhdyBvbmUgZmVhdHVyZSBhdCBhIHRpbWUKCiAgICAgIHRoaXMubWFwLm9uKEwuRHJhdy5FdmVudC5EUkFXU1RBUlQsIGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgICAgdGhpcy5jbGVhckN1c3RvbUFyZWFGaWx0ZXIoKTsKICAgICAgfS5iaW5kKHRoaXMpKTsKICAgICAgdGhpcy5pbml0aWFsRHJhd1NlbGVjdGVkQXJlYSgpOwogICAgICB0aGlzLm9uUmVzaXplKCk7CgogICAgICBpZiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFGZWF0dXJlcyB8fCB0aGlzLnZhbGlkRHJhd25BcmVhKSB7CiAgICAgICAgdGhpcy5mZXRjaEZlYXR1cmVzKCdkYXRhJyk7CiAgICAgIH0KCiAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzMi5mbHlUb0JvdW5kcygpOwogICAgICB9LCAxMDApOwogICAgfSwKICAgIG9uUmVzaXplOiBmdW5jdGlvbiBvblJlc2l6ZSgpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICAvLyB0byBmaXggcGFuZWwgc2l6ZSBmb3IgcmVmZXJlbmNlIGltYWdlIHdpbmRvdwogICAgICBpZiAodGhpcy5tYXApIHsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMy5tYXAuaW52YWxpZGF0ZVNpemUoKTsKICAgICAgICB9LCAxMDApOwogICAgICB9CiAgICB9LAogICAgaW5pdGlhbERyYXdTZWxlY3RlZEFyZWE6IGZ1bmN0aW9uIGluaXRpYWxEcmF3U2VsZWN0ZWRBcmVhKCkgewogICAgICBpZiAodGhpcy5jdXN0b21BcmVhRmlsdGVyKSB7CiAgICAgICAgLy8gYWRkIGRyYXcgY29udHJvbHMKICAgICAgICB0aGlzLmRyYXdDb250cm9sLmFkZFRvKHRoaXMubWFwKTsKICAgICAgICB0aGlzLnJlbmRlclRyYXNoQmluID0gdHJ1ZTsKICAgICAgICB0aGlzLnVwZGF0ZVNlbGVjdGVkQXJlYUZlYXR1cmUoKTsKICAgICAgfQogICAgfSwKICAgIHVwZGF0ZVNlbGVjdGVkQXJlYUZlYXR1cmU6IGZ1bmN0aW9uIHVwZGF0ZVNlbGVjdGVkQXJlYUZlYXR1cmUoKSB7CiAgICAgIHZhciBmdHJzID0gbnVsbDsKCiAgICAgIGlmICh0aGlzLnZhbGlkRHJhd25BcmVhKSB7CiAgICAgICAgdGhpcy5mZXRjaEZlYXR1cmVzKCdkYXRhJyk7CgogICAgICAgIGlmICh0aGlzLmVuYWJsZUNvbXBhcmUpIHsKICAgICAgICAgIHRoaXMuZmV0Y2hGZWF0dXJlcygnY29tcGFyZScpOwogICAgICAgIH0KCiAgICAgICAgZnRycyA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMuZHJhd25BcmVhKTsKICAgICAgfQoKICAgICAgaWYgKGZ0cnMpIHsKICAgICAgICAvLyBhZGQgZmVhdHVyZSB0byBiZSBkcmF3biBpbnRvIGxheWVyCiAgICAgICAgdGhpcy4kcmVmcy5jdXN0b21BcmVhRmlsdGVyRmVhdHVyZXMubWFwT2JqZWN0LmFkZExheWVyKGdlb0pzb24oZnRycywgewogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6IHRoaXMuYXBwQ29uZmlnLmJyYW5kaW5nLnByaW1hcnlDb2xvcgogICAgICAgICAgfQogICAgICAgIH0pKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRyZWZzLmN1c3RvbUFyZWFGaWx0ZXJGZWF0dXJlcy5tYXBPYmplY3QuY2xlYXJMYXllcnMoKTsKICAgICAgfQogICAgfSwKICAgIGNvdW50cmllc09wdGlvbnM6IGZ1bmN0aW9uIGNvdW50cmllc09wdGlvbnMoKSB7CiAgICAgIHZhciBjdXJyZW50SW5kaWNhdG9yID0gdGhpcy5pbmRpY2F0b3I7CiAgICAgIHJldHVybiB7CiAgICAgICAgb25FYWNoRmVhdHVyZTogZnVuY3Rpb24gb25FYWNoRmVhdHVyZShmZWF0dXJlLCBsYXllcikgewogICAgICAgICAgdmFyIF90aGlzNCA9IHRoaXM7CgogICAgICAgICAgbGF5ZXIuYmluZFRvb2x0aXAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICByZXR1cm4gZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWU7CiAgICAgICAgICB9LCB7CiAgICAgICAgICAgIGRpcmVjdGlvbjogJ3RvcCcsCiAgICAgICAgICAgIHN0aWNreTogdHJ1ZQogICAgICAgICAgfSk7CiAgICAgICAgICBsYXllci5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgIHZhciBjb3VudHJ5QTIgPSBmZWF0dXJlLnByb3BlcnRpZXMuYWxwaGEyOwoKICAgICAgICAgICAgX3RoaXM0LmZldGNoTW9iaWxpdHlEYXRhKGNvdW50cnlBMiwgY3VycmVudEluZGljYXRvci5hb2lJRCk7CgogICAgICAgICAgICBpZiAoX3RoaXM0LnNlbGVjdGVkTGF5ZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICBfdGhpczQuc2VsZWN0ZWRMYXllci5zZXRTdHlsZSh7CiAgICAgICAgICAgICAgICBjb2xvcjogJyMyMjInLAogICAgICAgICAgICAgICAgd2VpZ2h0OiAxLAogICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZicsCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CgogICAgICAgICAgICBfdGhpczQuc2VsZWN0ZWRDb3VudHJ5ID0gY291bnRyeUEyOwogICAgICAgICAgICBfdGhpczQuc2VsZWN0ZWRMYXllciA9IGxheWVyOwogICAgICAgICAgICBfdGhpczQucG9wdXBOYW1lID0gZmVhdHVyZS5wcm9wZXJ0aWVzLm5hbWU7CiAgICAgICAgICB9KTsKICAgICAgICAgIGxheWVyLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgY3VyckxheWVyID0gZS50YXJnZXQ7CiAgICAgICAgICAgIGN1cnJMYXllci5zZXRTdHlsZSh7CiAgICAgICAgICAgICAgd2VpZ2h0OiAyLAogICAgICAgICAgICAgIGNvbG9yOiBfdGhpczQuJHZ1ZXRpZnkudGhlbWUuY3VycmVudFRoZW1lLnByaW1hcnksCiAgICAgICAgICAgICAgZmlsbENvbG9yOiBfdGhpczQuJHZ1ZXRpZnkudGhlbWUuY3VycmVudFRoZW1lLnByaW1hcnksCiAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgIGlmICghTC5Ccm93c2VyLmllICYmICFMLkJyb3dzZXIub3BlcmEpIHsKICAgICAgICAgICAgICBsYXllci5icmluZ1RvRnJvbnQoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgICBsYXllci5vbignbW91c2VvdXQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICB2YXIgY3VyckxheWVyID0gZS50YXJnZXQ7CgogICAgICAgICAgICBpZiAoX3RoaXM0LnNlbGVjdGVkQ291bnRyeSAhPT0gZmVhdHVyZS5wcm9wZXJ0aWVzLmFscGhhMikgewogICAgICAgICAgICAgIGN1cnJMYXllci5zZXRTdHlsZSh7CiAgICAgICAgICAgICAgICBjb2xvcjogJyMyMjInLAogICAgICAgICAgICAgICAgd2VpZ2h0OiAxLAogICAgICAgICAgICAgICAgZmlsbENvbG9yOiAnI2ZmZicsCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLAogICAgICAgICAgICAgICAgZmlsbE9wYWNpdHk6IDAuNQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICB9KTsKICAgICAgICB9LmJpbmQodGhpcykKICAgICAgfTsKICAgIH0sCiAgICBmZWF0dXJlT3B0aW9uczogZnVuY3Rpb24gZmVhdHVyZU9wdGlvbnMoc2lkZSkgewogICAgICB2YXIgc3R5bGUgPSB0aGlzLm1lcmdlZENvbmZpZ3Moc2lkZSlbMF0uZmVhdHVyZXMgJiYgdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdLmZlYXR1cmVzLnN0eWxlID8gdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdLmZlYXR1cmVzLnN0eWxlIDoge307IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgIHJldHVybiB7CiAgICAgICAgb25FYWNoRmVhdHVyZTogZnVuY3Rpb24gb25FYWNoRmVhdHVyZShmZWF0dXJlLCBsYXllcikgewogICAgICAgICAgLy8gaWYgZmVhdHVyZXNQYXJhbWV0ZXJzIGF2YWlsYWJsZSwgc2hvdyBvbmx5IHByb3BlcnRpZXMgZnJvbSBtYXBwaW5nLCBvdGhlcndpc2UgZHVtcCBhbGwKICAgICAgICAgIHZhciBhbGxvd2VkUGFyYW1zID0gdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdLmZlYXR1cmVzID8gdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpWzBdLmZlYXR1cmVzLmFsbG93ZWRQYXJhbWV0ZXJzIDogbnVsbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICAgIHZhciBhbGxLZXlzID0gT2JqZWN0LmtleXMoZmVhdHVyZS5wcm9wZXJ0aWVzKTsKICAgICAgICAgIHZhciB0b29sdGlwID0gJyc7CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhbGxLZXlzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIGlmICghYWxsb3dlZFBhcmFtcyB8fCBfdHlwZW9mKGFsbG93ZWRQYXJhbXMpID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyhhbGxvd2VkUGFyYW1zKS5pbmNsdWRlcyhhbGxLZXlzW2ldKSB8fCBBcnJheS5pc0FycmF5KGFsbG93ZWRQYXJhbXMpICYmIGFsbG93ZWRQYXJhbXMuaW5jbHVkZXMoYWxsS2V5c1tpXSkpIHsKICAgICAgICAgICAgICB0b29sdGlwICs9ICI8c3Bhbj48Yj4iLmNvbmNhdChhbGxLZXlzW2ldLCAiPC9iPjogIikuY29uY2F0KGZlYXR1cmUucHJvcGVydGllc1thbGxLZXlzW2ldXSwgIjwvc3Bhbj48YnI+Iik7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KCiAgICAgICAgICBpZiAodG9vbHRpcCAhPT0gJycpIHsKICAgICAgICAgICAgbGF5ZXIuYmluZFRvb2x0aXAodG9vbHRpcCwgewogICAgICAgICAgICAgIHBhbmU6IHRoaXMucG9wdXBQYW5lCiAgICAgICAgICAgIH0pOwogICAgICAgICAgfSAvLyB0byBtYWtlIGNsdXN0ZXJpbmcgd29yawoKCiAgICAgICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXNDbHVzdGVyaW5nKSB7CiAgICAgICAgICAgIGxheWVyLmdldExhdExuZyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICByZXR1cm4gZ2VvSnNvbihmZWF0dXJlKS5nZXRCb3VuZHMoKS5nZXRDZW50ZXIoKTsKICAgICAgICAgICAgfTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lCgoKICAgICAgICAgICAgbGF5ZXIuc2V0TGF0TG5nID0gZnVuY3Rpb24gKCkge307IC8vZXNsaW50LWRpc2FibGUtbGluZQoKCiAgICAgICAgICAgIGxheWVyLl9sYXRsbmcgPSBsYXllci5nZXRMYXRMbmcoKTsgLy9lc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgICAgICB9CiAgICAgICAgfS5iaW5kKHRoaXMpLAogICAgICAgIC8vIHBvaW50IGNpcmNsZSBtYXJrZXIgc3R5bGluZwogICAgICAgIHBvaW50VG9MYXllcjogZnVuY3Rpb24gKGZlYXR1cmUsIGxhdGxuZykgewogICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbGluZQogICAgICAgICAgcmV0dXJuIGNpcmNsZU1hcmtlcihsYXRsbmcsIHsKICAgICAgICAgICAgcmFkaXVzOiBzdHlsZS5yYWRpdXMgfHwgOCwKICAgICAgICAgICAgY29sb3I6IHN0eWxlLmNvbG9yIHx8ICcjRkZBNTAwJywKICAgICAgICAgICAgd2VpZ2h0OiBzdHlsZS53ZWlnaHQgfHwgMiwKICAgICAgICAgICAgb3BhY2l0eTogc3R5bGUub3BhY2l0eSB8fCAxLAogICAgICAgICAgICBkYXNoQXJyYXk6IHN0eWxlLmRhc2hBcnJheSB8fCBudWxsLAogICAgICAgICAgICBkYXNoT2Zmc2V0OiBzdHlsZS5kYXNoT2Zmc2V0IHx8IG51bGwsCiAgICAgICAgICAgIGZpbGxPcGFjaXR5OiBzdHlsZS5maWxsT3BhY2l0eSB8fCAxLAogICAgICAgICAgICBmaWxsQ29sb3I6IHN0eWxlLmZpbGxDb2xvciB8fCAnI0ZGQTUwMCcsCiAgICAgICAgICAgIGZpbGw6IHN0eWxlLmZpbGwgfHwgdHJ1ZSwKICAgICAgICAgICAgcGFuZTogc2lkZSA9PT0gJ2RhdGEnID8gdGhpcy50b29sdGlwUGFuZSA6IHRoaXMuc2hhZG93UGFuZQogICAgICAgICAgfSk7CiAgICAgICAgfS5iaW5kKHRoaXMpLAogICAgICAgIC8vIHBvbHlnb24gYW5kIGxpbmUgc3R5bGluZwogICAgICAgIHN0eWxlOiB7CiAgICAgICAgICBjb2xvcjogc3R5bGUuY29sb3IgfHwgJyNGRkE1MDAnLAogICAgICAgICAgd2VpZ2h0OiBzdHlsZS53ZWlnaHQgfHwgMiwKICAgICAgICAgIG9wYWNpdHk6IHN0eWxlLm9wYWNpdHkgfHwgMSwKICAgICAgICAgIGRhc2hBcnJheTogc3R5bGUuZGFzaEFycmF5IHx8IG51bGwsCiAgICAgICAgICBkYXNoT2Zmc2V0OiBzdHlsZS5kYXNoT2Zmc2V0IHx8IG51bGwsCiAgICAgICAgICBmaWxsT3BhY2l0eTogc3R5bGUuZmlsbE9wYWNpdHkgfHwgMCwKICAgICAgICAgIGZpbGxDb2xvcjogc3R5bGUuZmlsbENvbG9yIHx8ICcjRkZBNTAwJywKICAgICAgICAgIGZpbGw6IHN0eWxlLmZpbGwgfHwgdHJ1ZQogICAgICAgIH0KICAgICAgfTsKICAgIH0sCiAgICBnZXRDb2xvckNvZGU6IGZ1bmN0aW9uIGdldENvbG9yQ29kZShzaWRlKSB7CiAgICAgIHZhciBpID0gc2lkZSA9PT0gJ2NvbXBhcmUnID8gdGhpcy5jb21wYXJlTGF5ZXJJbmRleCA6IHRoaXMuZGF0YUxheWVySW5kZXg7CiAgICAgIHZhciBjdXJyZW50VmFsdWUgPSBudWxsOyAvLyBjb21wZW5zYXRlIGZvciBjb2xvciBjb2RlIHdpdGggb25seSBvbmUgZW50cnksIHN0aWxsIHNob3dpbmcgaXQKCiAgICAgIGlmICh0aGlzLnVzZWRUaW1lcy5jb2xvckNvZGUpIHsKICAgICAgICB2YXIgY29sb3JzID0gdGhpcy51c2VkVGltZXMuY29sb3JDb2RlOwoKICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShjb2xvcnMpICYmIGNvbG9ycy5sZW5ndGggPT09IDEpIHsKICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGNvbG9yc1swXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZwogICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb2xvcnMpICYmIGNvbG9yc1tpXSkgewogICAgICAgICAgY3VycmVudFZhbHVlID0gY29sb3JzW2ldOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nCiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gY3VycmVudFZhbHVlOwogICAgfSwKICAgIGdldEFvaUZpbGw6IGZ1bmN0aW9uIGdldEFvaUZpbGwoc2lkZSkgewogICAgICB2YXIgY3VycmVudFZhbHVlID0gdGhpcy5nZXRDb2xvckNvZGUoc2lkZSk7CiAgICAgIHJldHVybiBjdXJyZW50VmFsdWUgPyB0aGlzLmdldEluZGljYXRvckNvbG9yKGN1cnJlbnRWYWx1ZSkgOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3I7CiAgICB9LAogICAgc3ViQW9pU3R5bGU6IGZ1bmN0aW9uIHN1YkFvaVN0eWxlKHNpZGUpIHsKICAgICAgdmFyIGN1cnJlbnRWYWx1ZSA9IHRoaXMuZ2V0Q29sb3JDb2RlKHNpZGUpOwogICAgICByZXR1cm4gewogICAgICAgIGNvbG9yOiBjdXJyZW50VmFsdWUgPyB0aGlzLmdldEluZGljYXRvckNvbG9yKGN1cnJlbnRWYWx1ZSkgOiB0aGlzLmFwcENvbmZpZy5icmFuZGluZy5wcmltYXJ5Q29sb3IsCiAgICAgICAgd2VpZ2h0OiAzLAogICAgICAgIGZpbGw6IGZhbHNlCiAgICAgIH07CiAgICB9LAogICAgY29uZmlnRnJvbUlucHV0RGF0YTogZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0RGF0YShzaWRlKSB7CiAgICAgIHZhciBpID0gc2lkZSA9PT0gJ2NvbXBhcmUnID8gdGhpcy5jb21wYXJlTGF5ZXJJbmRleCA6IHRoaXMuZGF0YUxheWVySW5kZXg7CiAgICAgIHZhciBpbnB1dERhdGEgPSB0aGlzLnVzZWRUaW1lcy5pbnB1dERhdGEubGVuZ3RoID09PSAxID8gdGhpcy51c2VkVGltZXMuaW5wdXREYXRhWzBdIDogdGhpcy51c2VkVGltZXMuaW5wdXREYXRhW2ldOwoKICAgICAgaWYgKHRoaXMuYmFzZUNvbmZpZy5sYXllck5hbWVNYXBwaW5nLmhhc093blByb3BlcnR5KGlucHV0RGF0YSkpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCiAgICAgICAgdmFyIGNvbmZpZyA9IHRoaXMuYmFzZUNvbmZpZy5sYXllck5hbWVNYXBwaW5nW2lucHV0RGF0YV07CgogICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb25maWcpKSB7CiAgICAgICAgICAvLyBhc3N1cmUgYXJyYXkgaXMgcmV0dXJuZWQKICAgICAgICAgIGNvbmZpZyA9IFtjb25maWddOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIGNvbmZpZzsKICAgICAgfSAvLyBlbXB0eSBjb25maWcgdXNlZCBsYXRlciBmb3IgbWVyZ2luZwoKCiAgICAgIHJldHVybiBbXTsKICAgIH0sCiAgICBnZXRDb21iaW5lZFdNU0xheWVyczogZnVuY3Rpb24gZ2V0Q29tYmluZWRXTVNMYXllcnMoc2lkZSkgewogICAgICB2YXIgY29tYkxheWVycyA9IHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKS5maWx0ZXIoZnVuY3Rpb24gKGwpIHsKICAgICAgICByZXR1cm4gbC5wcm90b2NvbCA9PT0gJ1dNUycgJiYgT2JqZWN0LmtleXMobCkuaW5kZXhPZignY29tYmluZWRMYXllcnMnKSAhPT0gLTE7CiAgICAgIH0pOwogICAgICByZXR1cm4gY29tYkxheWVyczsKICAgIH0sCiAgICBnZXRTaW1wbGVXTVNMYXllcnM6IGZ1bmN0aW9uIGdldFNpbXBsZVdNU0xheWVycyhzaWRlKSB7CiAgICAgIHZhciBjb21iTGF5ZXJzID0gdGhpcy5tZXJnZWRDb25maWdzKHNpZGUpLmZpbHRlcihmdW5jdGlvbiAobCkgewogICAgICAgIHJldHVybiBsLnByb3RvY29sID09PSAnV01TJyAmJiBPYmplY3Qua2V5cyhsKS5pbmRleE9mKCdjb21iaW5lZExheWVycycpID09PSAtMTsKICAgICAgfSk7CiAgICAgIHJldHVybiBjb21iTGF5ZXJzOwogICAgfSwKICAgIG1lcmdlZENvbmZpZ3M6IGZ1bmN0aW9uIG1lcmdlZENvbmZpZ3MoKSB7CiAgICAgIHZhciBfdGhpczUgPSB0aGlzOwoKICAgICAgdmFyIHNpZGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICdkYXRhJzsKICAgICAgLy8gZmlyc3QgY2hlY2sgaWYgc3BlY2lhbCBjb21wYXJlIGxheWVyIGNvbmZpZ3VyZWQKICAgICAgdmFyIGRpc3BsYXlUbXAgPSBzaWRlID09PSAnY29tcGFyZScgJiYgdGhpcy5pbmRpY2F0b3IuY29tcGFyZURpc3BsYXkgPyB0aGlzLmluZGljYXRvci5jb21wYXJlRGlzcGxheSA6IHRoaXMuaW5kaWNhdG9yLmRpc3BsYXk7IC8vIGZvbGxvd2luZyBjb25maWd1cmF0aW9uIG1lcmdpbmcgaXMgZG9uZToKICAgICAgLy8gZGVmYXVsdExheWVyc0Rpc3BsYXkgKHRvIGF2b2lkIGhhdmluZyB0byBjb25maWd1cmUgaXQgYmVmb3JlKQogICAgICAvLyBpbmREZWZpbml0aW9uIC0gaW5kaWNhdG9yIGNvZGUgc3BlY2lmaWMgY29uZmlndXJhdGlvbgogICAgICAvLyBkaXNwbGF5IC0gY29taW5nIGZyb20ganMgY29uZmlndXJhdGlvbiAtIGVzYS5qcyBPUgogICAgICAvLyBjb25maWdGcm9tSW5wdXREYXRhIC0gY29taW5nIGZyb20gaW5wdXQgZGF0YSByZWZlcmVuY2UgZnJvbSBjc3ZzCgogICAgICBpZiAoZGlzcGxheVRtcCkgewogICAgICAgIC8vIGZyb20gbGF5ZXIgY29uZmlndXJhdGlvbgogICAgICAgIGlmICghQXJyYXkuaXNBcnJheShkaXNwbGF5VG1wKSkgewogICAgICAgICAgLy8gYWx3YXlzIG1ha2UgYW4gQXJyYXkgb2YgbGF5ZXIgY29uZmlndXJhdGlvbnMKICAgICAgICAgIGRpc3BsYXlUbXAgPSBbZGlzcGxheVRtcF07CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgZmluYWxDb25maWdzID0gW107CiAgICAgIHZhciB1c2VkQ29uZmlnRm9yTWVyZ2UgPSB7fTsKICAgICAgdmFyIG5hbWUgPSB0aGlzLmluZGljYXRvci5kZXNjcmlwdGlvbjsKCiAgICAgIGlmICghZGlzcGxheVRtcCAmJiB0aGlzLmNvbmZpZ0Zyb21JbnB1dERhdGEoc2lkZSkubGVuZ3RoID09PSAwKSB7CiAgICAgICAgLy8gbm8gYWRkaXRpb25hbCBjb25maWcgc3BlY2lmaWVkLCB1c2UgZGVmYXVsdHMKICAgICAgICB1c2VkQ29uZmlnRm9yTWVyZ2UgPSBbewogICAgICAgICAgbmFtZTogbmFtZQogICAgICAgIH1dOwogICAgICB9IGVsc2UgaWYgKCFkaXNwbGF5VG1wKSB7CiAgICAgICAgLy8gdXNlIGNvbmZpZ0Zyb21JbnB1dERhdGEKICAgICAgICB1c2VkQ29uZmlnRm9yTWVyZ2UgPSB0aGlzLmNvbmZpZ0Zyb21JbnB1dERhdGEoc2lkZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgLy8gdXNlIGRpc3BsYXlUbXAgZXZlbiBpZiBjb25maWdGcm9tSW5wdXREYXRhIHNldCB0b28KICAgICAgICB1c2VkQ29uZmlnRm9yTWVyZ2UgPSBkaXNwbGF5VG1wOwogICAgICB9CgogICAgICB1c2VkQ29uZmlnRm9yTWVyZ2UuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgIC8vIG1lcmdlIGNvbmZpZ3MgZm9yIGVhY2ggbGF5ZXIKICAgICAgICBuYW1lID0gaXRlbS5uYW1lIHx8IG5hbWU7IC8vIENoZWNrIHRvIHNlZSBpZiB3ZSBoYXZlIGdyb3VwZWQgbGF5ZXJzLCBpZiB3ZSBkbyB3ZSBuZWVkIHRvIGFkZAogICAgICAgIC8vIHRoZSBkZWZhdWx0IHRvIHRoZW0gdG9vCgogICAgICAgIHZhciBleHRlbmRlZEl0ZW0gPSBpdGVtOwoKICAgICAgICBpZiAoT2JqZWN0LmtleXMoaXRlbSkuaW5kZXhPZignY29tYmluZWRMYXllcnMnKSAhPT0gLTEpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXRlbS5jb21iaW5lZExheWVycy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgICBleHRlbmRlZEl0ZW0uY29tYmluZWRMYXllcnNbaV0gPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXM1LmJhc2VDb25maWcuZGVmYXVsdExheWVyc0Rpc3BsYXkpLCBfdGhpczUuaW5kRGVmaW5pdGlvbiksIGl0ZW0uY29tYmluZWRMYXllcnNbaV0pOwogICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgZmluYWxDb25maWdzLnB1c2goX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgX3RoaXM1LmJhc2VDb25maWcuZGVmYXVsdExheWVyc0Rpc3BsYXkpLCBfdGhpczUuaW5kRGVmaW5pdGlvbiksIGV4dGVuZGVkSXRlbSksIHt9LCB7CiAgICAgICAgICBuYW1lOiBuYW1lCiAgICAgICAgfSkpOwogICAgICB9KTsKICAgICAgcmV0dXJuIGZpbmFsQ29uZmlnczsKICAgIH0sCiAgICBmbHlUb0JvdW5kczogZnVuY3Rpb24gZmx5VG9Cb3VuZHMoKSB7CiAgICAgIC8vIHpvb21zIHRvIHN1YmFvaSBpZiBwcmVzZW50IG9yIGFyZWEgYXJvdW5kIGFvaSBpZiBub3QKICAgICAgdmFyIGJvdW5kc1BhZCA9IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmxhcmdlU3ViQW9pID8gNSA6IHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLm1pZFN1YkFvaSA/IDEgOiAwLjE1OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICBpZiAodGhpcy5zdWJBb2kgJiYgdGhpcy5zdWJBb2kuZmVhdHVyZXMubGVuZ3RoID4gMCkgewogICAgICAgIHZhciB2aWV3Qm91bmRzID0gdGhpcy5tZXJnZWRDb25maWdzKClbMF0ucHJlc2V0VmlldyA/IGdlb0pzb24odGhpcy5tZXJnZWRDb25maWdzKClbMF0ucHJlc2V0VmlldykuZ2V0Qm91bmRzKCkgOiBnZW9Kc29uKHRoaXMuc3ViQW9pKS5nZXRCb3VuZHMoKTsKICAgICAgICB2YXIgYm91bmRzID0gZ2VvSnNvbih0aGlzLnN1YkFvaSkuZ2V0Qm91bmRzKCk7CiAgICAgICAgdmFyIGNvcm5lck1heDEgPSBsYXRMbmcoW2JvdW5kcy5nZXRTb3V0aCgpIC0gYm91bmRzUGFkLCBib3VuZHMuZ2V0V2VzdCgpIC0gYm91bmRzUGFkXSk7CiAgICAgICAgdmFyIGNvcm5lck1heDIgPSBsYXRMbmcoW2JvdW5kcy5nZXROb3J0aCgpICsgYm91bmRzUGFkLCBib3VuZHMuZ2V0RWFzdCgpICsgYm91bmRzUGFkXSk7CiAgICAgICAgdmFyIGJvdW5kc01heCA9IGxhdExuZ0JvdW5kcyhjb3JuZXJNYXgxLCBjb3JuZXJNYXgyKTsKICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHModmlld0JvdW5kcyk7IC8vIGxpbWl0IHVzZXIgbW92ZW1lbnQgYXJvdW5kIG1hcAoKICAgICAgICB0aGlzLm1hcC5zZXRNYXhCb3VuZHMoYm91bmRzTWF4KTsKCiAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmxhcmdlU3ViQW9pKSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDIpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0ubWlkU3ViQW9pKSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDEzKTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0ucHJlc2V0VmlldykgewogICAgICAgIC8vIGlmIG9ubHkgcHJlc2V0IHZpZXcgbW92ZSBtYXAgdGhlcmUgd2l0aG91dCBsaW1pdGluZyBtb3ZlbWVudAogICAgICAgIHZhciBfdmlld0JvdW5kcyA9IGdlb0pzb24odGhpcy5tZXJnZWRDb25maWdzKClbMF0ucHJlc2V0VmlldykuZ2V0Qm91bmRzKCk7CgogICAgICAgIHRoaXMubWFwLmZpdEJvdW5kcyhfdmlld0JvdW5kcyk7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5hb2kpIHsKICAgICAgICB2YXIgX2Nvcm5lck1heCA9IGxhdExuZyhbdGhpcy5hb2kubGF0IC0gYm91bmRzUGFkLCB0aGlzLmFvaS5sbmcgLSBib3VuZHNQYWRdKTsKCiAgICAgICAgdmFyIF9jb3JuZXJNYXgyID0gbGF0TG5nKFt0aGlzLmFvaS5sYXQgKyBib3VuZHNQYWQsIHRoaXMuYW9pLmxuZyArIGJvdW5kc1BhZF0pOwoKICAgICAgICB2YXIgX2JvdW5kc01heCA9IGxhdExuZ0JvdW5kcyhfY29ybmVyTWF4LCBfY29ybmVyTWF4Mik7CgogICAgICAgIHRoaXMubWFwLnNldFpvb20oMTYpOwogICAgICAgIHRoaXMubWFwLnBhblRvKHRoaXMuYW9pKTsKCiAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmxhcmdlU3ViQW9pKSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDIpOwogICAgICAgIH0gZWxzZSBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0ubWlkU3ViQW9pKSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDkpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLm1hcC5zZXRNaW5ab29tKDEyKTsKICAgICAgICB9IC8vIGxpbWl0IHVzZXIgbW92ZW1lbnQgYXJvdW5kIG1hcAoKCiAgICAgICAgdGhpcy5tYXAuc2V0TWF4Qm91bmRzKF9ib3VuZHNNYXgpOwogICAgICB9IGVsc2UgewogICAgICAgIC8vIHpvb20gdG8gZGVmYXVsdCBiYm94IGZyb20gY29uZmlnCiAgICAgICAgdGhpcy5tYXAuc2V0TWluWm9vbSh0aGlzLm1hcERlZmF1bHRzLm1pbk1hcFpvb20pOwogICAgICAgIHRoaXMubWFwLnNldE1heEJvdW5kcyhudWxsKTsKICAgICAgICB0aGlzLm1hcC5maXRCb3VuZHMobGF0TG5nQm91bmRzKHRoaXMubWFwRGVmYXVsdHMuYm91bmRzKSk7CiAgICAgIH0KICAgIH0sCiAgICBnZXRUaW1lTGFiZWw6IGZ1bmN0aW9uIGdldFRpbWVMYWJlbCh0aW1lKSB7CiAgICAgIGlmIChBcnJheS5pc0FycmF5KHRpbWUpICYmIHRpbWUubGVuZ3RoID09PSAyKSB7CiAgICAgICAgLy8gc2hvdyBzdGFydCAtIGVuZAogICAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5tYXBUaW1lTGFiZWxFeHRlbmRlZCkgewogICAgICAgICAgcmV0dXJuIHRpbWUubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tSVNPKGQpLnRvSVNPKHsKICAgICAgICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZQogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pLmpvaW4oJyAtICcpOwogICAgICAgIH0KCiAgICAgICAgcmV0dXJuIHRpbWUubWFwKGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyhkKS50b0lTT0RhdGUoKTsKICAgICAgICB9KS5qb2luKCcgLSAnKTsKICAgICAgfSBlbHNlIGlmICh0aW1lIGluc3RhbmNlb2YgRGF0ZVRpbWUpIHsKICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVsc2UtcmV0dXJuCiAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLm1hcFRpbWVMYWJlbEV4dGVuZGVkKSB7CiAgICAgICAgICByZXR1cm4gdGltZS50b0lTTyh7CiAgICAgICAgICAgIHN1cHByZXNzTWlsbGlzZWNvbmRzOiB0cnVlCiAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiB0aW1lLnRvSVNPRGF0ZSgpOwogICAgICB9CgogICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0ubWFwVGltZUxhYmVsRXh0ZW5kZWQpIHsKICAgICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lKS50b0lTTyh7CiAgICAgICAgICBzdXBwcmVzc01pbGxpc2Vjb25kczogdHJ1ZQogICAgICAgIH0pOwogICAgICB9CgogICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbUlTTyh0aW1lKS50b0lTT0RhdGUoKTsKICAgIH0sCiAgICBsYXllck9wdGlvbnM6IGZ1bmN0aW9uIGxheWVyT3B0aW9ucyh0aW1lLCBzb3VyY2VPcHRpb25zT2JqKSB7CiAgICAgIHZhciBhZGRpdGlvbmFsU2V0dGluZ3MgPSB7fTsKCiAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlT3B0aW9uc09iaiwgJ3NpdGVNYXBwaW5nJykpIHsKICAgICAgICB2YXIgY3VyclNpdGUgPSBzb3VyY2VPcHRpb25zT2JqLnNpdGVNYXBwaW5nKHRoaXMuaW5kaWNhdG9yLmFvaUlEKTsKICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3Muc2l0ZSA9IGN1cnJTaXRlOwogICAgICB9CgogICAgICBpZiAodHlwZW9mIHNvdXJjZU9wdGlvbnNPYmoubWluWm9vbSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3MubWluWm9vbSA9IHNvdXJjZU9wdGlvbnNPYmoubWluWm9vbTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBzb3VyY2VPcHRpb25zT2JqLm1heFpvb20gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLm1heFpvb20gPSBzb3VyY2VPcHRpb25zT2JqLm1heFpvb207CiAgICAgIH0KCiAgICAgIGlmICh0eXBlb2Ygc291cmNlT3B0aW9uc09iai5taW5OYXRpdmVab29tICE9PSAndW5kZWZpbmVkJykgewogICAgICAgIGFkZGl0aW9uYWxTZXR0aW5ncy5taW5OYXRpdmVab29tID0gc291cmNlT3B0aW9uc09iai5taW5OYXRpdmVab29tOwogICAgICB9CgogICAgICBpZiAodHlwZW9mIHNvdXJjZU9wdGlvbnNPYmoubWF4TmF0aXZlWm9vbSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3MubWF4TmF0aXZlWm9vbSA9IHNvdXJjZU9wdGlvbnNPYmoubWF4TmF0aXZlWm9vbTsKICAgICAgfQoKICAgICAgaWYgKHR5cGVvZiBzb3VyY2VPcHRpb25zT2JqLmJvdW5kcyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3MuYm91bmRzID0gc291cmNlT3B0aW9uc09iai5ib3VuZHM7CiAgICAgIH0KCiAgICAgIGlmICh0aW1lICE9PSBudWxsKSB7CiAgICAgICAgLy8gdGltZSBhcyBpcyBnZXRzIGF1dG9tYXRpY2FsbHkgaW5qZWN0ZWQgdG8gV01TIHF1ZXJ5IE9SIHh5eiB1cmwge3RpbWV9IHRlbXBsYXRlCiAgICAgICAgdmFyIGZpeFRpbWUgPSB0aW1lLnZhbHVlIHx8IHRpbWU7CiAgICAgICAgYWRkaXRpb25hbFNldHRpbmdzLnRpbWUgPSB0eXBlb2Ygc291cmNlT3B0aW9uc09iai5kYXRlRm9ybWF0RnVuY3Rpb24gPT09ICdmdW5jdGlvbicgPyBzb3VyY2VPcHRpb25zT2JqLmRhdGVGb3JtYXRGdW5jdGlvbihmaXhUaW1lKSA6IGZpeFRpbWU7CgogICAgICAgIGlmIChzb3VyY2VPcHRpb25zT2JqLmZlYXR1cmVzKSB7CiAgICAgICAgICBhZGRpdGlvbmFsU2V0dGluZ3MuZmVhdHVyZXNUaW1lID0gdHlwZW9mIHNvdXJjZU9wdGlvbnNPYmouZmVhdHVyZXMuZGF0ZUZvcm1hdEZ1bmN0aW9uID09PSAnZnVuY3Rpb24nID8gc291cmNlT3B0aW9uc09iai5mZWF0dXJlcy5kYXRlRm9ybWF0RnVuY3Rpb24oZml4VGltZSkgOiBmaXhUaW1lOwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGFkZGl0aW9uYWxTZXR0aW5nczsKICAgIH0sCiAgICBkYXRhTGF5ZXJUaW1lU2VsZWN0aW9uOiBmdW5jdGlvbiBkYXRhTGF5ZXJUaW1lU2VsZWN0aW9uKHBheWxvYWQpIHsKICAgICAgdmFyIF90aGlzNiA9IHRoaXM7CgogICAgICAvLyBEaWZmZXJlbnQgb2JqZWN0IHJldHVybmVkIGVpdGhlciBieSBhcnJvdyB1c2Ugb3IgYnkgZHJvcGRvd24gdXNlCiAgICAgIGlmIChBcnJheS5pc0FycmF5KHBheWxvYWQpIHx8ICFwYXlsb2FkLnZhbHVlKSB7CiAgICAgICAgdGhpcy5kYXRhTGF5ZXJUaW1lID0gewogICAgICAgICAgdmFsdWU6IHBheWxvYWQsCiAgICAgICAgICBuYW1lOiAiIi5jb25jYXQocGF5bG9hZCkKICAgICAgICB9OwogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuZGF0YUxheWVyVGltZSA9IHBheWxvYWQ7CiAgICAgIH0KCiAgICAgIHZhciBuZXdJbmRleCA9IHRoaXMuYXJyYXlPZk9iamVjdHMubWFwKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkudmFsdWU7CiAgICAgIH0pLmluZGV4T2YodGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlID8gdGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlIDogdGhpcy5kYXRhTGF5ZXJUaW1lKTsKICAgICAgdGhpcy5kYXRhTGF5ZXJJbmRleCA9IG5ld0luZGV4OwogICAgICB0aGlzLnJlZnJlc2hMYXllcnMoJ2RhdGEnKTsKICAgICAgdGhpcy4kbmV4dFRpY2soZnVuY3Rpb24gKCkgewogICAgICAgIF90aGlzNi5zbGlkZXIuc2V0UmlnaHRMYXllcnMoX3RoaXM2LmV4dHJhY3RBY3R1YWxMYXllcnMoX3RoaXM2LiRyZWZzLmRhdGFMYXllcnMpKTsKICAgICAgfSk7CgogICAgICBpZiAodGhpcy5pbmRpY2F0b3IuY29tcGFyZURpc3BsYXkpIHsKICAgICAgICAvLyBzaGFyZWQgdGltZSBvbiBib3RoIHNpZGVzIGluIGNhc2Ugb2YgY29tcGFyZURpc3BsYXkgYmVpbmcgc2V0CiAgICAgICAgdGhpcy5jb21wYXJlTGF5ZXJUaW1lID0gdGhpcy5kYXRhTGF5ZXJUaW1lOwogICAgICAgIHRoaXMuY29tcGFyZUxheWVySW5kZXggPSBuZXdJbmRleDsKICAgICAgICB0aGlzLnJlZnJlc2hMYXllcnMoJ2NvbXBhcmUnKTsKICAgICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgICBfdGhpczYuc2xpZGVyLnNldExlZnRMYXllcnMoX3RoaXM2LmV4dHJhY3RBY3R1YWxMYXllcnMoX3RoaXM2LiRyZWZzLmNvbXBhcmVMYXllcnMpKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKICAgIGV4dHJhY3RBY3R1YWxMYXllcnM6IGZ1bmN0aW9uIGV4dHJhY3RBY3R1YWxMYXllcnMoZ3JvdXApIHsKICAgICAgdmFyIF90aGlzNyA9IHRoaXM7CgogICAgICB2YXIgYWN0dWFsTGF5ZXJzID0gW107CgogICAgICBpZiAoZ3JvdXAuJGNoaWxkcmVuLmxlbmd0aCA+IDApIHsKICAgICAgICBncm91cC4kY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoY2hpbGQpIHsKICAgICAgICAgIGFjdHVhbExheWVycyA9IGFjdHVhbExheWVycy5jb25jYXQoX3RoaXM3LmV4dHJhY3RBY3R1YWxMYXllcnMoY2hpbGQpKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICBhY3R1YWxMYXllcnMucHVzaChncm91cC5tYXBPYmplY3QpOwogICAgICB9CgogICAgICByZXR1cm4gYWN0dWFsTGF5ZXJzOwogICAgfSwKICAgIGNvbXBhcmVMYXllclRpbWVTZWxlY3Rpb246IGZ1bmN0aW9uIGNvbXBhcmVMYXllclRpbWVTZWxlY3Rpb24ocGF5bG9hZCkgewogICAgICB2YXIgX3RoaXM4ID0gdGhpczsKCiAgICAgIC8vIERpZmZlcmVudCBvYmplY3QgcmV0dXJuZWQgZWl0aGVyIGJ5IGFycm93IHVzZSBvciBieSBkcm9wZG93biB1c2UKICAgICAgaWYgKEFycmF5LmlzQXJyYXkocGF5bG9hZCkgfHwgIXBheWxvYWQudmFsdWUpIHsKICAgICAgICB0aGlzLmNvbXBhcmVMYXllclRpbWUgPSB7CiAgICAgICAgICB2YWx1ZTogcGF5bG9hZCwKICAgICAgICAgIG5hbWU6ICIiLmNvbmNhdChwYXlsb2FkKQogICAgICAgIH07CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wYXJlTGF5ZXJUaW1lID0gcGF5bG9hZDsKICAgICAgfQoKICAgICAgdmFyIG5ld0luZGV4ID0gdGhpcy5hcnJheU9mT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS52YWx1ZTsKICAgICAgfSkuaW5kZXhPZih0aGlzLmNvbXBhcmVMYXllclRpbWUudmFsdWUgPyB0aGlzLmNvbXBhcmVMYXllclRpbWUudmFsdWUgOiB0aGlzLmNvbXBhcmVMYXllclRpbWUpOwogICAgICB0aGlzLmNvbXBhcmVMYXllckluZGV4ID0gbmV3SW5kZXg7CiAgICAgIHRoaXMucmVmcmVzaExheWVycygnY29tcGFyZScpOwogICAgICB0aGlzLiRuZXh0VGljayhmdW5jdGlvbiAoKSB7CiAgICAgICAgX3RoaXM4LnNsaWRlci5zZXRMZWZ0TGF5ZXJzKF90aGlzOC5leHRyYWN0QWN0dWFsTGF5ZXJzKF90aGlzOC4kcmVmcy5jb21wYXJlTGF5ZXJzKSk7CiAgICAgIH0pOwogICAgfSwKICAgIGRhdGFMYXllclJlZHVjZTogZnVuY3Rpb24gZGF0YUxheWVyUmVkdWNlKCkgewogICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5hcnJheU9mT2JqZWN0cy5tYXAoZnVuY3Rpb24gKGkpIHsKICAgICAgICByZXR1cm4gaS52YWx1ZTsKICAgICAgfSkuaW5kZXhPZih0aGlzLmRhdGFMYXllclRpbWUudmFsdWUgPyB0aGlzLmRhdGFMYXllclRpbWUudmFsdWUgOiB0aGlzLmRhdGFMYXllclRpbWUpOwogICAgICB0aGlzLmRhdGFMYXllckluZGV4ID0gY3VycmVudEluZGV4IC0gMTsKICAgICAgdGhpcy5kYXRhTGF5ZXJUaW1lU2VsZWN0aW9uKHRoaXMuYXJyYXlPZk9iamVjdHNbY3VycmVudEluZGV4IC0gMV0pOwogICAgfSwKICAgIGRhdGFMYXllckluY3JlYXNlOiBmdW5jdGlvbiBkYXRhTGF5ZXJJbmNyZWFzZSgpIHsKICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMuYXJyYXlPZk9iamVjdHMubWFwKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkudmFsdWU7CiAgICAgIH0pLmluZGV4T2YodGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlID8gdGhpcy5kYXRhTGF5ZXJUaW1lLnZhbHVlIDogdGhpcy5kYXRhTGF5ZXJUaW1lKTsKICAgICAgdGhpcy5kYXRhTGF5ZXJJbmRleCA9IGN1cnJlbnRJbmRleCArIDE7CiAgICAgIHRoaXMuZGF0YUxheWVyVGltZVNlbGVjdGlvbih0aGlzLmFycmF5T2ZPYmplY3RzW2N1cnJlbnRJbmRleCArIDFdKTsKICAgIH0sCiAgICBjb21wYXJlTGF5ZXJSZWR1Y2U6IGZ1bmN0aW9uIGNvbXBhcmVMYXllclJlZHVjZSgpIHsKICAgICAgdmFyIGN1cnJlbnRJbmRleCA9IHRoaXMuYXJyYXlPZk9iamVjdHMubWFwKGZ1bmN0aW9uIChpKSB7CiAgICAgICAgcmV0dXJuIGkudmFsdWU7CiAgICAgIH0pLmluZGV4T2YodGhpcy5jb21wYXJlTGF5ZXJUaW1lLnZhbHVlID8gdGhpcy5jb21wYXJlTGF5ZXJUaW1lLnZhbHVlIDogdGhpcy5jb21wYXJlTGF5ZXJUaW1lKTsKICAgICAgdGhpcy5jb21wYXJlTGF5ZXJJbmRleCA9IGN1cnJlbnRJbmRleCAtIDE7CiAgICAgIHRoaXMuY29tcGFyZUxheWVyVGltZVNlbGVjdGlvbih0aGlzLmFycmF5T2ZPYmplY3RzW2N1cnJlbnRJbmRleCAtIDFdKTsKICAgIH0sCiAgICBjb21wYXJlTGF5ZXJJbmNyZWFzZTogZnVuY3Rpb24gY29tcGFyZUxheWVySW5jcmVhc2UoKSB7CiAgICAgIHZhciBjdXJyZW50SW5kZXggPSB0aGlzLmFycmF5T2ZPYmplY3RzLm1hcChmdW5jdGlvbiAoaSkgewogICAgICAgIHJldHVybiBpLnZhbHVlOwogICAgICB9KS5pbmRleE9mKHRoaXMuY29tcGFyZUxheWVyVGltZS52YWx1ZSA/IHRoaXMuY29tcGFyZUxheWVyVGltZS52YWx1ZSA6IHRoaXMuY29tcGFyZUxheWVyVGltZSk7CiAgICAgIHRoaXMuY29tcGFyZUxheWVySW5kZXggPSBjdXJyZW50SW5kZXggKyAxOwogICAgICB0aGlzLmNvbXBhcmVMYXllclRpbWVTZWxlY3Rpb24odGhpcy5hcnJheU9mT2JqZWN0c1tjdXJyZW50SW5kZXggKyAxXSk7CiAgICB9LAogICAgZ2V0SW5pdGlhbENvbXBhcmVUaW1lOiBmdW5jdGlvbiBnZXRJbml0aWFsQ29tcGFyZVRpbWUoKSB7CiAgICAgIC8vIGZpbmQgY2xvc2VzdCBlbnRyeSBvbmUgeWVhciBiZWZvcmUgbGF0ZXN0IHRpbWUKICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmxhcmdlVGltZUR1cmF0aW9uKSB7CiAgICAgICAgLy8gaWYgaW50ZXJ2YWwsIHVzZSBqdXN0IHN0YXJ0IHRvIGdldCBjbG9zZXN0CiAgICAgICAgdmFyIHRpbWVzID0gdGhpcy51c2VkVGltZXMudGltZS5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGl0ZW0pID8gaXRlbVswXSA6IGl0ZW07CiAgICAgICAgfSk7CiAgICAgICAgdmFyIGxhc3RUaW1lRW50cnkgPSBEYXRlVGltZS5mcm9tSVNPKHRpbWVzW3RpbWVzLmxlbmd0aCAtIDFdKTsKICAgICAgICB2YXIgb25lWWVhckJlZm9yZSA9IGxhc3RUaW1lRW50cnkubWludXMoewogICAgICAgICAgeWVhcnM6IDEKICAgICAgICB9KTsgLy8gc2VsZWN0IGNsb3Nlc3QgdG8gb25lIHllYXIgYmVmb3JlCgogICAgICAgIHZhciBjbG9zZXN0T25lWWVhckJlZm9yZSA9IHRpbWVzLmZpbmQoZnVuY3Rpb24gKGl0ZW0sIGkpIHsKICAgICAgICAgIHJldHVybiBpID09PSB0aW1lcy5sZW5ndGggLSAxIHx8IE1hdGguYWJzKG9uZVllYXJCZWZvcmUudG9NaWxsaXMoKSAtIERhdGVUaW1lLmZyb21JU08oaXRlbSkudG9NaWxsaXMoKSkgPCBNYXRoLmFicyhvbmVZZWFyQmVmb3JlLnRvTWlsbGlzKCkgLSBEYXRlVGltZS5mcm9tSVNPKHRpbWVzW2kgKyAxXSkudG9NaWxsaXMoKSk7CiAgICAgICAgfSk7IC8vIEdldCBpbmRleCBhbmQgcmV0dXJuIG9iamVjdCBmcm9tIG9yaWdpbmFsIHRpbWVzIGFzIHRoZXJlIGFyZSBhbHNvCiAgICAgICAgLy8gYXJyYXlzIG9mIHRpbWUgdHVwbGUgYXJyYXlzCgogICAgICAgIHZhciBmb3VuZEluZGV4ID0gdGltZXMuaW5kZXhPZihjbG9zZXN0T25lWWVhckJlZm9yZSk7CiAgICAgICAgcmV0dXJuIHRoaXMudXNlZFRpbWVzLnRpbWVbZm91bmRJbmRleF07CiAgICAgIH0gLy8gdXNlIGZpcnN0IHRpbWUKCgogICAgICByZXR1cm4gdGhpcy51c2VkVGltZXMudGltZVswXTsKICAgIH0sCiAgICByZWZyZXNoR3JvdXA6IGZ1bmN0aW9uIHJlZnJlc2hHcm91cChncm91cCwgdGltZSkgewogICAgICB2YXIgX3RoaXM5ID0gdGhpczsKCiAgICAgIC8vIEdyb3VwIGNhbiBhbHNvIGJlIGFuIGFycmF5IGRlcGVuZGluZyBvbiB0eXBlCiAgICAgIGlmIChncm91cCkgewogICAgICAgIHZhciB0b0l0ZXJhdGU7CgogICAgICAgIGlmIChBcnJheS5pc0FycmF5KGdyb3VwKSkgewogICAgICAgICAgdG9JdGVyYXRlID0gZ3JvdXA7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRvSXRlcmF0ZSA9IGdyb3VwLiRjaGlsZHJlbjsKICAgICAgICB9CgogICAgICAgIGlmICh0b0l0ZXJhdGUpIHsKICAgICAgICAgIHRvSXRlcmF0ZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgIC8vIFdlIGNoZWNrIGlmIHdlIGhhdmUgYSBzaW1wbGUgbGF5ZXIgb3IgYSBncm91cGVkIGxheWVyCiAgICAgICAgICAgIGlmIChpdGVtLiRjaGlsZHJlbi5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgLy8gVGhpcyBpcyBhIGdyb3VwZWQgbGF5ZXIsIHdlIGl0ZXJhdGUgb3ZlciB0aGUgbGF5ZXJzCiAgICAgICAgICAgICAgaXRlbS4kY2hpbGRyZW4uZm9yRWFjaChmdW5jdGlvbiAoc3ViSXRlbSkgewogICAgICAgICAgICAgICAgLy8gVE9ETzogcHJvcHNEYXRhIGRvIG5vdCBoYXZlIGFsbCB0aGUgcGFyYW1ldGVycyB3ZSBuZWVkIChsaWtlIGRhdGVGb3JtYXRGdW5jdGlvbikKICAgICAgICAgICAgICAgIC8vIFRPRE8gZXh0ZW5kIHRoaXMgZ2V0dGluZyB0aGUgbWVyZ2VkQ29uZmlncyBpbiBhIHNhbWUgd2F5IGFzIHdoZW4gbm9uLWdyb3VwZWQKICAgICAgICAgICAgICAgIHN1Ykl0ZW0ubWFwT2JqZWN0LnNldFBhcmFtcyhfdGhpczkubGF5ZXJPcHRpb25zKHRpbWUsIHN1Ykl0ZW0uJG9wdGlvbnMucHJvcHNEYXRhKSk7IC8vIGZvcmNlIHJlZHJhdyBvZiBsYXllcgoKICAgICAgICAgICAgICAgIHN1Ykl0ZW0uJGZvcmNlVXBkYXRlKCk7CiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsQ29uZmlnID0gX3RoaXM5Lm1lcmdlZENvbmZpZ3MoKS5maW5kKGZ1bmN0aW9uIChjb25maWcpIHsKICAgICAgICAgICAgICAgIHJldHVybiBjb25maWcubmFtZSA9PT0gaXRlbS5uYW1lOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBpdGVtLm1hcE9iamVjdC5zZXRQYXJhbXMoX3RoaXM5LmxheWVyT3B0aW9ucyh0aW1lLCBvcmlnaW5hbENvbmZpZykpOyAvLyBmb3JjZSByZWRyYXcgb2YgbGF5ZXIKCiAgICAgICAgICAgICAgaXRlbS4kZm9yY2VVcGRhdGUoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgcmVmcmVzaExheWVyczogZnVuY3Rpb24gcmVmcmVzaExheWVycyhzaWRlKSB7CiAgICAgIHZhciBfdGhpczEwID0gdGhpczsKCiAgICAgIC8vIGNvbXBhcmUobGVmdCkgb3IgZGF0YShyaWdodCkKICAgICAgaWYgKHNpZGUgPT09ICdjb21wYXJlJyB8fCB0aGlzLmluZGljYXRvci5jb21wYXJlRGlzcGxheSkgewogICAgICAgIHRoaXMucmVmcmVzaEdyb3VwKHRoaXMuJHJlZnMuY29tcGFyZUxheWVyQXJyYXlXTVMsIHRoaXMuY3VycmVudENvbXBhcmVUaW1lKTsKCiAgICAgICAgaWYgKHRoaXMuJHJlZnMuY29tcGFyZUxheWVyQXJyYXlYWVopIHsKICAgICAgICAgIHRoaXMuJHJlZnMuY29tcGFyZUxheWVyQXJyYXlYWVouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICB2YXIgb3JpZ2luYWxJbmRleCA9IHBhcnNlSW50KGl0ZW0uJGF0dHJzWydkYXRhLWtleS1vcmlnaW5hbGluZGV4J10sIDEwKTsKICAgICAgICAgICAgX3RoaXMxMC5jb21wYXJlTGF5ZXJLZXlYWVpbb3JpZ2luYWxJbmRleF0gPSBNYXRoLnJhbmRvbSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzU3RhdGljICYmICghdGhpcy5tZXJnZWRDb25maWdzKClbMF0uY3VzdG9tQXJlYUZlYXR1cmVzIHx8IHRoaXMudmFsaWREcmF3bkFyZWEpKSB7CiAgICAgICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXNDbHVzdGVyaW5nKSB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmVhdHVyZXNDb21wYXJlQ2x1c3Rlci5tYXBPYmplY3QuY2xlYXJMYXllcnMoKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmZldGNoRmVhdHVyZXMoJ2NvbXBhcmUnKTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIGlmIChzaWRlID09PSAnZGF0YScpIHsKICAgICAgICB0aGlzLnJlZnJlc2hHcm91cCh0aGlzLiRyZWZzLmRhdGFMYXllckFycmF5V01TLCB0aGlzLmN1cnJlbnRUaW1lKTsKCiAgICAgICAgaWYgKHRoaXMuJHJlZnMuZGF0YUxheWVyQXJyYXlYWVopIHsKICAgICAgICAgIHRoaXMuJHJlZnMuZGF0YUxheWVyQXJyYXlYWVouZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICB2YXIgb3JpZ2luYWxJbmRleCA9IHBhcnNlSW50KGl0ZW0uJGF0dHJzWydkYXRhLWtleS1vcmlnaW5hbGluZGV4J10sIDEwKTsKICAgICAgICAgICAgX3RoaXMxMC5kYXRhTGF5ZXJLZXlYWVpbb3JpZ2luYWxJbmRleF0gPSBNYXRoLnJhbmRvbSgpOwogICAgICAgICAgfSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzU3RhdGljICYmICghdGhpcy5tZXJnZWRDb25maWdzKClbMF0uY3VzdG9tQXJlYUZlYXR1cmVzIHx8IHRoaXMudmFsaWREcmF3bkFyZWEpKSB7CiAgICAgICAgICBpZiAodGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXNDbHVzdGVyaW5nKSB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmVhdHVyZXNEYXRhQ2x1c3Rlci5tYXBPYmplY3QuY2xlYXJMYXllcnMoKTsKICAgICAgICAgIH0KCiAgICAgICAgICB0aGlzLmZldGNoRmVhdHVyZXMoJ2RhdGEnKTsKICAgICAgICB9CiAgICAgIH0KICAgIH0sCiAgICBmZXRjaEZlYXR1cmVzOiBmdW5jdGlvbiBmZXRjaEZlYXR1cmVzKHNpZGUpIHsKICAgICAgdmFyIF90aGlzMTEgPSB0aGlzOwoKICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncyhzaWRlKVswXS5mZWF0dXJlcykgewogICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5sYXllck9wdGlvbnMoc2lkZSA9PT0gJ2NvbXBhcmUnID8gdGhpcy5jdXJyZW50Q29tcGFyZVRpbWUgOiB0aGlzLmN1cnJlbnRUaW1lLCB0aGlzLm1lcmdlZENvbmZpZ3Moc2lkZSlbMF0pOyAvLyBhZGQgY3VzdG9tIGFyZWEgaWYgcHJlc2VudAoKICAgICAgICB2YXIgY3VzdG9tQXJlYSA9IHt9OwoKICAgICAgICBpZiAodGhpcy52YWxpZERyYXduQXJlYSkgewogICAgICAgICAgY3VzdG9tQXJlYSA9IHR5cGVvZiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy5hcmVhRm9ybWF0RnVuY3Rpb24gPT09ICdmdW5jdGlvbicgPyB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy5hcmVhRm9ybWF0RnVuY3Rpb24odGhpcy5kcmF3bkFyZWEpIDogewogICAgICAgICAgICBhcmVhOiBKU09OLnN0cmluZ2lmeSh0aGlzLmRyYXduQXJlYSkKICAgICAgICAgIH07CiAgICAgICAgfQoKICAgICAgICB2YXIgdGVtcGxhdGVTdWJzdCA9IF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLmluZGljYXRvciksIG9wdGlvbnMpLCBjdXN0b21BcmVhKTsKCiAgICAgICAgdmFyIHRlbXBsYXRlUmUgPSAvXHsgKihbXHdfIC1dKykgKlx9L2c7CiAgICAgICAgdmFyIHVybCA9IHRlbXBsYXRlKHRlbXBsYXRlUmUsIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLnVybCwgdGVtcGxhdGVTdWJzdCk7CiAgICAgICAgdmFyIHJlcXVlc3RCb2R5ID0gbnVsbDsKCiAgICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLnJlcXVlc3RCb2R5KSB7CiAgICAgICAgICByZXF1ZXN0Qm9keSA9IF9vYmplY3RTcHJlYWQoe30sIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzLnJlcXVlc3RCb2R5KTsKICAgICAgICAgIHZhciBwYXJhbXMgPSBPYmplY3Qua2V5cyhyZXF1ZXN0Qm9keSk7CgogICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJhbXMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgLy8gc3Vic3RpdHV0ZSB0ZW1wbGF0ZSBzdHJpbmdzIHdpdGggdmFsdWVzCiAgICAgICAgICAgIHJlcXVlc3RCb2R5W3BhcmFtc1tpXV0gPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVJlLCByZXF1ZXN0Qm9keVtwYXJhbXNbaV1dLCB0ZW1wbGF0ZVN1YnN0KTsKICAgICAgICAgIH0KICAgICAgICB9CgogICAgICAgIHZhciByZXF1ZXN0T3B0cyA9IHsKICAgICAgICAgIGNyZWRlbnRpYWxzOiAnc2FtZS1vcmlnaW4nLAogICAgICAgICAgbWV0aG9kOiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5mZWF0dXJlcy5yZXF1ZXN0TWV0aG9kIHx8ICdHRVQnLAogICAgICAgICAgaGVhZGVyczogdGhpcy5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMucmVxdWVzdEhlYWRlcnMgfHwge30KICAgICAgICB9OwoKICAgICAgICBpZiAocmVxdWVzdEJvZHkpIHsKICAgICAgICAgIHJlcXVlc3RPcHRzLmJvZHkgPSBKU09OLnN0cmluZ2lmeShyZXF1ZXN0Qm9keSk7CiAgICAgICAgfQoKICAgICAgICB0aGlzLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkaW5nJyk7CiAgICAgICAgZmV0Y2godXJsLCByZXF1ZXN0T3B0cykudGhlbihmdW5jdGlvbiAocikgewogICAgICAgICAgcmV0dXJuIHIuanNvbigpOwogICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHJhd2RhdGEpIHsKICAgICAgICAgIC8vIGlmIGN1c3RvbSByZXNwb25zZSAtPiBmZWF0dXJlIG1hcHBpbmcgZnVuY3Rpb24gY29uZmlndXJlZCwgYXBwbHkgaXQKICAgICAgICAgIGlmICh0eXBlb2YgX3RoaXMxMS5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMuY2FsbGJhY2tGdW5jdGlvbiA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICByZXR1cm4gX3RoaXMxMS5tZXJnZWRDb25maWdzKClbMF0uZmVhdHVyZXMuY2FsbGJhY2tGdW5jdGlvbihyYXdkYXRhKTsKICAgICAgICAgIH0KCiAgICAgICAgICByZXR1cm4gcmF3ZGF0YTsKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICBfdGhpczExLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7CgogICAgICAgICAgX3RoaXMxMS51cGRhdGVKc29uTGF5ZXJzKGRhdGEsIHNpZGUpOwogICAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMTEubWFwLmZpcmVFdmVudCgnZGF0YWxvYWQnKTsKCiAgICAgICAgICBfdGhpczExLnVwZGF0ZUpzb25MYXllcnMoZW1wdHlGLCBzaWRlKTsKICAgICAgICB9KTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLnVwZGF0ZUpzb25MYXllcnMoZW1wdHlGLCBzaWRlKTsKICAgICAgfQogICAgfSwKICAgIHNlbGVjdEdTQUluZGljYXRvcjogZnVuY3Rpb24gc2VsZWN0R1NBSW5kaWNhdG9yKGZlYXR1cmUpIHsKICAgICAgdmFyIF90aGlzMTIgPSB0aGlzOwoKICAgICAgdGhpcy5zZWxlY3RlZEJvcmRlciA9IGZlYXR1cmUuYm9yZGVySWQ7CiAgICAgIHZhciBkYXRhVXJsID0gIi4vZW9kYXNoLWRhdGEvaW50ZXJuYWwvIi5jb25jYXQoZmVhdHVyZS5ib3JkZXJJZCwgIi5qc29uIik7CiAgICAgIHRoaXMubWFwLmZpcmVFdmVudCgnZGF0YWxvYWRpbmcnKTsKICAgICAgZmV0Y2goZGF0YVVybCkudGhlbihmdW5jdGlvbiAocikgewogICAgICAgIHJldHVybiByLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5kaWNhdG9yKSB7CiAgICAgICAgdmFyIHJldHVybkluZGljYXRvciA9IHt9OwogICAgICAgIHJldHVybkluZGljYXRvci52YWx1ZXMgPSBfb2JqZWN0U3ByZWFkKHt9LCBpbmRpY2F0b3IpOwogICAgICAgIHJldHVybkluZGljYXRvci5pbmRpY2F0b3IgPSAnR1NBJzsgLy8gR2V0IGFsbCB0aW1lcyBvZiBhdmFpbGFibGUgYm9yZGVyIGNyb3NzaW5ncyB0byBhbGxvdyBmaW5kaW5nIG1pbiBtYXgKCiAgICAgICAgcmV0dXJuSW5kaWNhdG9yLnRpbWUgPSBbXTsKICAgICAgICBPYmplY3Qua2V5cyhpbmRpY2F0b3IpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgewogICAgICAgICAgdmFyIGN1cnJWYWxzID0gaW5kaWNhdG9yW2tleV0udmFsdWVzOwoKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY3VyclZhbHMubGVuZ3RoOyBpICs9IDEpIHsKICAgICAgICAgICAgcmV0dXJuSW5kaWNhdG9yLnRpbWUucHVzaChEYXRlVGltZS5mcm9tSVNPKGN1cnJWYWxzW2ldLnRpbWVzdGFtcCkpOwogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICAgIHJldHVybkluZGljYXRvci5tZWFzdXJlbWVudCA9IFswXTsKICAgICAgICByZXR1cm5JbmRpY2F0b3IudGl0bGUgPSBmZWF0dXJlLm5hbWU7CiAgICAgICAgcmV0dXJuSW5kaWNhdG9yLnlBeGlzID0gX3RoaXMxMi5pbmRpY2F0b3IueUF4aXM7CgogICAgICAgIF90aGlzMTIubWFwLmZpcmVFdmVudCgnZGF0YWxvYWQnKTsKCiAgICAgICAgX3RoaXMxMi4kc3RvcmUuY29tbWl0KCdpbmRpY2F0b3JzL0NVU1RPTV9BUkVBX0lORElDQVRPUl9MT0FEX0ZJTklTSEVEJywgcmV0dXJuSW5kaWNhdG9yKTsKCiAgICAgICAgX3RoaXMxMi4kZW1pdCgnZmV0Y2hDdXN0b21BcmVhSW5kaWNhdG9yJyk7CiAgICAgIH0pWyJjYXRjaCJdKGZ1bmN0aW9uIChlcnIpIHsKICAgICAgICBfdGhpczEyLm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7IC8vIEl0IHNlZW1zIGRhdGEgY291bGQgbm90IGJlIGxvYWRlZCBsZXRzIHNob3cgYSBubyBkYXRhIGZvdW5kIG1lc3NhZ2UKCgogICAgICAgIF90aGlzMTIuJHN0b3JlLmNvbW1pdCgnaW5kaWNhdG9ycy9DVVNUT01fQVJFQV9JTkRJQ0FUT1JfTE9BRF9GSU5JU0hFRCcsIHsKICAgICAgICAgIGlzRW1wdHk6IHRydWUKICAgICAgICB9KTsKCiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgfSk7CiAgICB9LAogICAgZmV0Y2hNb2JpbGl0eURhdGE6IGZ1bmN0aW9uIGZldGNoTW9iaWxpdHlEYXRhKGNvdW50cnlDb2RlLCBhb2lJRCkgewogICAgICB2YXIgX3RoaXMxMyA9IHRoaXM7CgogICAgICB2YXIgZGF0YVVybCA9ICIuL2VvZGFzaC1kYXRhL2ludGVybmFsLyIuY29uY2F0KGNvdW50cnlDb2RlLCAiLSIpLmNvbmNhdChhb2lJRCwgIi5qc29uIik7CiAgICAgIHRoaXMubWFwLmZpcmVFdmVudCgnZGF0YWxvYWRpbmcnKTsKICAgICAgZmV0Y2goZGF0YVVybCkudGhlbihmdW5jdGlvbiAocikgewogICAgICAgIHJldHVybiByLmpzb24oKTsKICAgICAgfSkudGhlbihmdW5jdGlvbiAoaW5kaWNhdG9yKSB7CiAgICAgICAgaW5kaWNhdG9yLmluZGljYXRvciA9IGFvaUlEOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgIGluZGljYXRvci50aW1lID0gaW5kaWNhdG9yLlZhbHVlcy5tYXAoZnVuY3Rpb24gKHJvdykgewogICAgICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21JU08ocm93LmRhdGUpOwogICAgICAgIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lCgogICAgICAgIGluZGljYXRvci5tZWFzdXJlbWVudCA9IFswXTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBpbmRpY2F0b3IuY291bnRyeSA9IGluZGljYXRvci5Db3VudHJ5Q29kZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZQoKICAgICAgICBpbmRpY2F0b3IudGl0bGUgPSBpbmRpY2F0b3IuQ291bnRyeU5hbWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgaW5kaWNhdG9yLnlBeGlzID0gX3RoaXMxMy5pbmRpY2F0b3IueUF4aXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUKCiAgICAgICAgX3RoaXMxMy5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZCcpOwoKICAgICAgICBfdGhpczEzLiRzdG9yZS5jb21taXQoJ2luZGljYXRvcnMvQ1VTVE9NX0FSRUFfSU5ESUNBVE9SX0xPQURfRklOSVNIRUQnLCBpbmRpY2F0b3IpOwoKICAgICAgICBfdGhpczEzLiRlbWl0KCdmZXRjaEN1c3RvbUFyZWFJbmRpY2F0b3InKTsKICAgICAgfSlbImNhdGNoIl0oZnVuY3Rpb24gKGVycikgewogICAgICAgIF90aGlzMTMubWFwLmZpcmVFdmVudCgnZGF0YWxvYWQnKTsgLy8gSXQgc2VlbXMgZGF0YSBjb3VsZCBub3QgYmUgbG9hZGVkIGxldHMgc2hvdyBhIG5vIGRhdGEgZm91bmQgbWVzc2FnZQoKCiAgICAgICAgX3RoaXMxMy4kc3RvcmUuY29tbWl0KCdpbmRpY2F0b3JzL0NVU1RPTV9BUkVBX0lORElDQVRPUl9MT0FEX0ZJTklTSEVEJywgewogICAgICAgICAgaXNFbXB0eTogdHJ1ZQogICAgICAgIH0pOwoKICAgICAgICBjb25zb2xlLmxvZyhlcnIpOwogICAgICB9KTsKICAgIH0sCiAgICBmZXRjaEN1c3RvbUFyZWFJbmRpY2F0b3I6IGZ1bmN0aW9uIGZldGNoQ3VzdG9tQXJlYUluZGljYXRvcigpIHsKICAgICAgdmFyIF90aGlzMTQgPSB0aGlzOwoKICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLmxheWVyT3B0aW9ucyh0aGlzLmN1cnJlbnRUaW1lLCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXSk7IC8vIGFkZCBjdXN0b20gYXJlYSBpZiBwcmVzZW50CgogICAgICB2YXIgY3VzdG9tQXJlYSA9IHt9OwoKICAgICAgaWYgKHRoaXMudmFsaWREcmF3bkFyZWEpIHsKICAgICAgICBjdXN0b21BcmVhID0gdHlwZW9mIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmFyZWFJbmRpY2F0b3IuYXJlYUZvcm1hdEZ1bmN0aW9uID09PSAnZnVuY3Rpb24nID8gdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5hcmVhRm9ybWF0RnVuY3Rpb24odGhpcy5kcmF3bkFyZWEpIDogewogICAgICAgICAgYXJlYTogSlNPTi5zdHJpbmdpZnkodGhpcy5kcmF3bkFyZWEpCiAgICAgICAgfTsKICAgICAgfQoKICAgICAgdGhpcy5pbmRpY2F0b3IudGl0bGUgPSAnVXNlciBkZWZpbmVkIGFyZWEgb2YgaW50ZXJlc3QnOwoKICAgICAgdmFyIHRlbXBsYXRlU3Vic3QgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5pbmRpY2F0b3IpLCBvcHRpb25zKSwgY3VzdG9tQXJlYSk7CgogICAgICB2YXIgdGVtcGxhdGVSZSA9IC9ceyAqKFtcd18gLV0rKSAqXH0vZzsKICAgICAgdmFyIHVybCA9IHRlbXBsYXRlKHRlbXBsYXRlUmUsIHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmFyZWFJbmRpY2F0b3IudXJsLCB0ZW1wbGF0ZVN1YnN0KTsKICAgICAgdmFyIHJlcXVlc3RCb2R5ID0gbnVsbDsKCiAgICAgIGlmICh0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLnJlcXVlc3RCb2R5KSB7CiAgICAgICAgcmVxdWVzdEJvZHkgPSBfb2JqZWN0U3ByZWFkKHt9LCB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLnJlcXVlc3RCb2R5KTsKICAgICAgICB2YXIgcGFyYW1zID0gT2JqZWN0LmtleXMocmVxdWVzdEJvZHkpOwoKICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkgKz0gMSkgewogICAgICAgICAgLy8gc3Vic3RpdHV0ZSB0ZW1wbGF0ZSBzdHJpbmdzIHdpdGggdmFsdWVzCiAgICAgICAgICBpZiAodHlwZW9mIHJlcXVlc3RCb2R5W3BhcmFtc1tpXV0gPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgIHJlcXVlc3RCb2R5W3BhcmFtc1tpXV0gPSB0ZW1wbGF0ZSh0ZW1wbGF0ZVJlLCByZXF1ZXN0Qm9keVtwYXJhbXNbaV1dLCB0ZW1wbGF0ZVN1YnN0KTsKICAgICAgICAgIH0gLy8gQ29udmVydCBnZW9qc29ucyBiYWNrIHRvIGFuIG9iamVjdAoKCiAgICAgICAgICBpZiAocGFyYW1zW2ldID09PSAnZ2VvanNvbicpIHsKICAgICAgICAgICAgcmVxdWVzdEJvZHlbcGFyYW1zW2ldXSA9IEpTT04ucGFyc2UocmVxdWVzdEJvZHlbcGFyYW1zW2ldXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CgogICAgICB2YXIgcmVxdWVzdE9wdHMgPSB7CiAgICAgICAgY3JlZGVudGlhbHM6ICdzYW1lLW9yaWdpbicsCiAgICAgICAgbWV0aG9kOiB0aGlzLm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLnJlcXVlc3RNZXRob2QgfHwgJ0dFVCcsCiAgICAgICAgaGVhZGVyczogdGhpcy5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5yZXF1ZXN0SGVhZGVycyB8fCB7fQogICAgICB9OwoKICAgICAgaWYgKHJlcXVlc3RCb2R5KSB7CiAgICAgICAgcmVxdWVzdE9wdHMuYm9keSA9IEpTT04uc3RyaW5naWZ5KHJlcXVlc3RCb2R5KTsKICAgICAgfQoKICAgICAgdGhpcy5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZGluZycpOwogICAgICBmZXRjaCh1cmwsIHJlcXVlc3RPcHRzKS50aGVuKGZ1bmN0aW9uIChyKSB7CiAgICAgICAgcmV0dXJuIHIuanNvbigpOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChyYXdkYXRhKSB7CiAgICAgICAgaWYgKHR5cGVvZiBfdGhpczE0Lm1lcmdlZENvbmZpZ3MoKVswXS5hcmVhSW5kaWNhdG9yLmNhbGxiYWNrRnVuY3Rpb24gPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgIC8vIG1lcmdlIGRhdGEgZnJvbSBjdXJyZW50IGluZGljYXRvciBkYXRhIGFuZCBuZXcgZGF0YSBmcm9tIGFwaQogICAgICAgICAgLy8gcmV0dXJucyBuZXcgaW5kaWNhdG9yIG9iamVjdCB0byBzZXQgYXMgY3VzdG9tIGFyZWEgaW5kaWNhdG9yCiAgICAgICAgICByZXR1cm4gX3RoaXMxNC5tZXJnZWRDb25maWdzKClbMF0uYXJlYUluZGljYXRvci5jYWxsYmFja0Z1bmN0aW9uKHJhd2RhdGEsIF90aGlzMTQuaW5kaWNhdG9yKTsKICAgICAgICB9CgogICAgICAgIHJldHVybiByYXdkYXRhOwogICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbmRpY2F0b3IpIHsKICAgICAgICBfdGhpczE0Lm1hcC5maXJlRXZlbnQoJ2RhdGFsb2FkJyk7CgogICAgICAgIF90aGlzMTQuJHN0b3JlLmNvbW1pdCgnaW5kaWNhdG9ycy9DVVNUT01fQVJFQV9JTkRJQ0FUT1JfTE9BRF9GSU5JU0hFRCcsIGluZGljYXRvcik7CgogICAgICAgIF90aGlzMTQuJGVtaXQoJ2ZldGNoQ3VzdG9tQXJlYUluZGljYXRvcicpOwogICAgICB9KVsiY2F0Y2giXShmdW5jdGlvbiAoZXJyKSB7CiAgICAgICAgX3RoaXMxNC5tYXAuZmlyZUV2ZW50KCdkYXRhbG9hZCcpOwoKICAgICAgICBfdGhpczE0LiRzdG9yZS5jb21taXQoJ2luZGljYXRvcnMvQ1VTVE9NX0FSRUFfSU5ESUNBVE9SX0xPQURfRklOSVNIRUQnLCBudWxsKTsKCiAgICAgICAgY29uc29sZS5sb2coZXJyKTsKICAgICAgfSk7CiAgICB9LAogICAgY2xlYXJDdXN0b21BcmVhRmlsdGVyOiBmdW5jdGlvbiBjbGVhckN1c3RvbUFyZWFGaWx0ZXIoKSB7CiAgICAgIHRoaXMuJHN0b3JlLmNvbW1pdCgnZmVhdHVyZXMvU0VUX1NFTEVDVEVEX0FSRUEnLCBudWxsKTsKICAgIH0sCiAgICBnZXREYXRhRjogZnVuY3Rpb24gZ2V0RGF0YUYoKSB7CiAgICAgIHJldHVybiBkYXRhRjsKICAgIH0sCiAgICBnZXRDb21wYXJlRjogZnVuY3Rpb24gZ2V0Q29tcGFyZUYoKSB7CiAgICAgIHJldHVybiBjb21wYXJlRjsKICAgIH0sCiAgICB1cGRhdGVKc29uTGF5ZXJzOiBmdW5jdGlvbiB1cGRhdGVKc29uTGF5ZXJzKGZ0cnMsIHNpZGUpIHsKICAgICAgaWYgKHRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmZlYXR1cmVzQ2x1c3RlcmluZykgewogICAgICAgIC8vIG1hcmtlcmNsdXN0ZXIgbmVlZHMgbWFudWFsIGFkZGluZyBvZiBhbGwgZ2VvanNvbnMgaXQgd2lsbCBzaG93CiAgICAgICAgLy8gYW5kIGNsZWFudXAgb2YgcHJldmlvdXMgY29udGVudAogICAgICAgIHZhciBnZW9qc29uRnJvbURhdGEgPSBnZW9Kc29uKGZ0cnMsIF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgdGhpcy5mZWF0dXJlT3B0aW9ucyhzaWRlKSksIHt9LCB7CiAgICAgICAgICBwYW5lOiBzaWRlID09PSAnZGF0YScgPyB0aGlzLnRvb2x0aXBQYW5lIDogdGhpcy5zaGFkb3dQYW5lCiAgICAgICAgfSkpOwoKICAgICAgICBpZiAodGhpcy4kcmVmcy5mZWF0dXJlc0RhdGFDbHVzdGVyKSB7CiAgICAgICAgICBpZiAoc2lkZSA9PT0gJ2RhdGEnKSB7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmVhdHVyZXNEYXRhQ2x1c3Rlci5tYXBPYmplY3QuY2xlYXJMYXllcnMoKTsKICAgICAgICAgICAgdGhpcy4kcmVmcy5mZWF0dXJlc0RhdGFDbHVzdGVyLm1hcE9iamVjdC5hZGRMYXllcnMoW2dlb2pzb25Gcm9tRGF0YV0pOwogICAgICAgICAgICB0aGlzLmRhdGFGZWF0dXJlc0NvdW50ID0gZnRycy5mZWF0dXJlcy5sZW5ndGg7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLiRyZWZzLmZlYXR1cmVzQ29tcGFyZUNsdXN0ZXIubWFwT2JqZWN0LmNsZWFyTGF5ZXJzKCk7CiAgICAgICAgICAgIHRoaXMuJHJlZnMuZmVhdHVyZXNDb21wYXJlQ2x1c3Rlci5tYXBPYmplY3QuYWRkTGF5ZXJzKFtnZW9qc29uRnJvbURhdGFdKTsKICAgICAgICAgICAgdGhpcy5jb21wYXJlRmVhdHVyZXNDb3VudCA9IGZ0cnMuZmVhdHVyZXMubGVuZ3RoOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfSBlbHNlIGlmIChzaWRlID09PSAnZGF0YScpIHsKICAgICAgICAvLyBub3JtYWwgZ2VvanNvbiBsYXllciBqdXN0IG5lZWRzIG1hbnVhbCByZWZyZXNoCiAgICAgICAgdGhpcy5kYXRhSnNvbkNvbXB1dGVkID0gZnRyczsKICAgICAgICB0aGlzLmRhdGFKc29uS2V5ID0gTWF0aC5yYW5kb20oKTsKICAgICAgICB0aGlzLmRhdGFGZWF0dXJlc0NvdW50ID0gZnRycy5mZWF0dXJlcy5sZW5ndGg7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb21wYXJlSnNvbkNvbXB1dGVkID0gZnRyczsKICAgICAgICB0aGlzLmNvbXBhcmVKc29uS2V5ID0gTWF0aC5yYW5kb20oKTsKICAgICAgICB0aGlzLmNvbXBhcmVGZWF0dXJlc0NvdW50ID0gZnRycy5mZWF0dXJlcy5sZW5ndGg7CiAgICAgIH0KICAgIH0KICB9LAogIHdhdGNoOiB7CiAgICBlbmFibGVDb21wYXJlOiBmdW5jdGlvbiBlbmFibGVDb21wYXJlKG9uKSB7CiAgICAgIHZhciBfdGhpczE1ID0gdGhpczsKCiAgICAgIGlmICghb24pIHsKICAgICAgICBpZiAodGhpcy5zbGlkZXIgIT09IG51bGwpIHsKICAgICAgICAgIHRoaXMubWFwLnJlbW92ZUNvbnRyb2wodGhpcy5zbGlkZXIpOwogICAgICAgICAgdGhpcy5tYXAucmVtb3ZlTGF5ZXIodGhpcy4kcmVmcy5jb21wYXJlTGF5ZXJzLm1hcE9iamVjdCk7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMubWFwLmFkZExheWVyKHRoaXMuJHJlZnMuY29tcGFyZUxheWVycy5tYXBPYmplY3QpOwoKICAgICAgICBpZiAoIXRoaXMubWVyZ2VkQ29uZmlncygpWzBdLmN1c3RvbUFyZWFGZWF0dXJlcyB8fCB0aGlzLnZhbGlkRHJhd25BcmVhKSB7CiAgICAgICAgICB0aGlzLmZldGNoRmVhdHVyZXMoJ2NvbXBhcmUnKTsKICAgICAgICB9CgogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzMTUuc2xpZGVyLnNldExlZnRMYXllcnMoX3RoaXMxNS5leHRyYWN0QWN0dWFsTGF5ZXJzKF90aGlzMTUuJHJlZnMuY29tcGFyZUxheWVycykpOwoKICAgICAgICAgIF90aGlzMTUuc2xpZGVyLnNldFJpZ2h0TGF5ZXJzKF90aGlzMTUuZXh0cmFjdEFjdHVhbExheWVycyhfdGhpczE1LiRyZWZzLmRhdGFMYXllcnMpKTsKCiAgICAgICAgICBfdGhpczE1LnNsaWRlci5hZGRUbyhfdGhpczE1Lm1hcCk7CiAgICAgICAgfSk7CiAgICAgIH0KICAgIH0sCiAgICBkcmF3bkFyZWE6IGZ1bmN0aW9uIGRyYXduQXJlYSgpIHsKICAgICAgLy8gd2F0Y2ggb24gZHJhd24gYXJlYSBwcm9wIGNoYW5nZSB0cmlnZ2VyaW5nIHVwZGF0ZSBvZiBkcmF3IGxheWVyLCBmZXRjaGluZyBjdXN0b20gZmVhdHVyZXMKICAgICAgdGhpcy51cGRhdGVTZWxlY3RlZEFyZWFGZWF0dXJlKCk7CiAgICB9CiAgfQp9Ow=="},null]}